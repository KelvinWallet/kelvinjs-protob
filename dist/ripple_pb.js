/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_pb = require('./common_pb.js');
goog.exportSymbol('proto.XrpCommand', null, global);
goog.exportSymbol('proto.XrpCommand.XrpGetPub', null, global);
goog.exportSymbol('proto.XrpCommand.XrpShowAddr', null, global);
goog.exportSymbol('proto.XrpCommand.XrpSignTx', null, global);
goog.exportSymbol('proto.XrpResponse', null, global);
goog.exportSymbol('proto.XrpResponse.XrpPublicKey', null, global);
goog.exportSymbol('proto.XrpResponse.XrpSig', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.XrpCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.XrpCommand.oneofGroups_);
};
goog.inherits(proto.XrpCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.XrpCommand.displayName = 'proto.XrpCommand';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.XrpCommand.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.XrpCommand.MsgCase = {
  MSG_NOT_SET: 0,
  GET_PUB: 1,
  SHOW_ADDR: 2,
  SIGN_TX: 3
};

/**
 * @return {proto.XrpCommand.MsgCase}
 */
proto.XrpCommand.prototype.getMsgCase = function() {
  return /** @type {proto.XrpCommand.MsgCase} */(jspb.Message.computeOneofCase(this, proto.XrpCommand.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.XrpCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.XrpCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.XrpCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.XrpCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    testnet: jspb.Message.getFieldWithDefault(msg, 10, false),
    getPub: (f = msg.getGetPub()) && proto.XrpCommand.XrpGetPub.toObject(includeInstance, f),
    showAddr: (f = msg.getShowAddr()) && proto.XrpCommand.XrpShowAddr.toObject(includeInstance, f),
    signTx: (f = msg.getSignTx()) && proto.XrpCommand.XrpSignTx.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.XrpCommand}
 */
proto.XrpCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.XrpCommand;
  return proto.XrpCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.XrpCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.XrpCommand}
 */
proto.XrpCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTestnet(value);
      break;
    case 1:
      var value = new proto.XrpCommand.XrpGetPub;
      reader.readMessage(value,proto.XrpCommand.XrpGetPub.deserializeBinaryFromReader);
      msg.setGetPub(value);
      break;
    case 2:
      var value = new proto.XrpCommand.XrpShowAddr;
      reader.readMessage(value,proto.XrpCommand.XrpShowAddr.deserializeBinaryFromReader);
      msg.setShowAddr(value);
      break;
    case 3:
      var value = new proto.XrpCommand.XrpSignTx;
      reader.readMessage(value,proto.XrpCommand.XrpSignTx.deserializeBinaryFromReader);
      msg.setSignTx(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.XrpCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.XrpCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.XrpCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.XrpCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTestnet();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getGetPub();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.XrpCommand.XrpGetPub.serializeBinaryToWriter
    );
  }
  f = message.getShowAddr();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.XrpCommand.XrpShowAddr.serializeBinaryToWriter
    );
  }
  f = message.getSignTx();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.XrpCommand.XrpSignTx.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.XrpCommand.XrpGetPub = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.XrpCommand.XrpGetPub.repeatedFields_, null);
};
goog.inherits(proto.XrpCommand.XrpGetPub, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.XrpCommand.XrpGetPub.displayName = 'proto.XrpCommand.XrpGetPub';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.XrpCommand.XrpGetPub.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.XrpCommand.XrpGetPub.prototype.toObject = function(opt_includeInstance) {
  return proto.XrpCommand.XrpGetPub.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.XrpCommand.XrpGetPub} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.XrpCommand.XrpGetPub.toObject = function(includeInstance, msg) {
  var f, obj = {
    pathList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.XrpCommand.XrpGetPub}
 */
proto.XrpCommand.XrpGetPub.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.XrpCommand.XrpGetPub;
  return proto.XrpCommand.XrpGetPub.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.XrpCommand.XrpGetPub} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.XrpCommand.XrpGetPub}
 */
proto.XrpCommand.XrpGetPub.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setPathList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.XrpCommand.XrpGetPub.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.XrpCommand.XrpGetPub.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.XrpCommand.XrpGetPub} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.XrpCommand.XrpGetPub.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPathList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
};


/**
 * repeated uint32 path = 1;
 * @return {!Array<number>}
 */
proto.XrpCommand.XrpGetPub.prototype.getPathList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<number>} value */
proto.XrpCommand.XrpGetPub.prototype.setPathList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.XrpCommand.XrpGetPub.prototype.addPath = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.XrpCommand.XrpGetPub.prototype.clearPathList = function() {
  this.setPathList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.XrpCommand.XrpShowAddr = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.XrpCommand.XrpShowAddr.repeatedFields_, null);
};
goog.inherits(proto.XrpCommand.XrpShowAddr, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.XrpCommand.XrpShowAddr.displayName = 'proto.XrpCommand.XrpShowAddr';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.XrpCommand.XrpShowAddr.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.XrpCommand.XrpShowAddr.prototype.toObject = function(opt_includeInstance) {
  return proto.XrpCommand.XrpShowAddr.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.XrpCommand.XrpShowAddr} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.XrpCommand.XrpShowAddr.toObject = function(includeInstance, msg) {
  var f, obj = {
    pathList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.XrpCommand.XrpShowAddr}
 */
proto.XrpCommand.XrpShowAddr.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.XrpCommand.XrpShowAddr;
  return proto.XrpCommand.XrpShowAddr.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.XrpCommand.XrpShowAddr} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.XrpCommand.XrpShowAddr}
 */
proto.XrpCommand.XrpShowAddr.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setPathList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.XrpCommand.XrpShowAddr.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.XrpCommand.XrpShowAddr.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.XrpCommand.XrpShowAddr} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.XrpCommand.XrpShowAddr.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPathList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
};


/**
 * repeated uint32 path = 1;
 * @return {!Array<number>}
 */
proto.XrpCommand.XrpShowAddr.prototype.getPathList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<number>} value */
proto.XrpCommand.XrpShowAddr.prototype.setPathList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.XrpCommand.XrpShowAddr.prototype.addPath = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.XrpCommand.XrpShowAddr.prototype.clearPathList = function() {
  this.setPathList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.XrpCommand.XrpSignTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.XrpCommand.XrpSignTx.repeatedFields_, null);
};
goog.inherits(proto.XrpCommand.XrpSignTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.XrpCommand.XrpSignTx.displayName = 'proto.XrpCommand.XrpSignTx';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.XrpCommand.XrpSignTx.repeatedFields_ = [10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.XrpCommand.XrpSignTx.prototype.toObject = function(opt_includeInstance) {
  return proto.XrpCommand.XrpSignTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.XrpCommand.XrpSignTx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.XrpCommand.XrpSignTx.toObject = function(includeInstance, msg) {
  var f, obj = {
    pathList: jspb.Message.getRepeatedField(msg, 10),
    account: msg.getAccount_asB64(),
    destination: msg.getDestination_asB64(),
    amount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    fee: jspb.Message.getFieldWithDefault(msg, 4, 0),
    sequence: jspb.Message.getFieldWithDefault(msg, 5, 0),
    lastLedgerSequence: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.XrpCommand.XrpSignTx}
 */
proto.XrpCommand.XrpSignTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.XrpCommand.XrpSignTx;
  return proto.XrpCommand.XrpSignTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.XrpCommand.XrpSignTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.XrpCommand.XrpSignTx}
 */
proto.XrpCommand.XrpSignTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 10:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setPathList(value);
      break;
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAccount(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDestination(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFee(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSequence(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLastLedgerSequence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.XrpCommand.XrpSignTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.XrpCommand.XrpSignTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.XrpCommand.XrpSignTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.XrpCommand.XrpSignTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPathList();
  if (f.length > 0) {
    writer.writePackedUint32(
      10,
      f
    );
  }
  f = message.getAccount_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getDestination_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getFee();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getSequence();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getLastLedgerSequence();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * repeated uint32 path = 10;
 * @return {!Array<number>}
 */
proto.XrpCommand.XrpSignTx.prototype.getPathList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 10));
};


/** @param {!Array<number>} value */
proto.XrpCommand.XrpSignTx.prototype.setPathList = function(value) {
  jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.XrpCommand.XrpSignTx.prototype.addPath = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


proto.XrpCommand.XrpSignTx.prototype.clearPathList = function() {
  this.setPathList([]);
};


/**
 * optional bytes account = 1;
 * @return {!(string|Uint8Array)}
 */
proto.XrpCommand.XrpSignTx.prototype.getAccount = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes account = 1;
 * This is a type-conversion wrapper around `getAccount()`
 * @return {string}
 */
proto.XrpCommand.XrpSignTx.prototype.getAccount_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAccount()));
};


/**
 * optional bytes account = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAccount()`
 * @return {!Uint8Array}
 */
proto.XrpCommand.XrpSignTx.prototype.getAccount_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAccount()));
};


/** @param {!(string|Uint8Array)} value */
proto.XrpCommand.XrpSignTx.prototype.setAccount = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes destination = 2;
 * @return {!(string|Uint8Array)}
 */
proto.XrpCommand.XrpSignTx.prototype.getDestination = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes destination = 2;
 * This is a type-conversion wrapper around `getDestination()`
 * @return {string}
 */
proto.XrpCommand.XrpSignTx.prototype.getDestination_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDestination()));
};


/**
 * optional bytes destination = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDestination()`
 * @return {!Uint8Array}
 */
proto.XrpCommand.XrpSignTx.prototype.getDestination_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDestination()));
};


/** @param {!(string|Uint8Array)} value */
proto.XrpCommand.XrpSignTx.prototype.setDestination = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint64 amount = 3;
 * @return {number}
 */
proto.XrpCommand.XrpSignTx.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.XrpCommand.XrpSignTx.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 fee = 4;
 * @return {number}
 */
proto.XrpCommand.XrpSignTx.prototype.getFee = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.XrpCommand.XrpSignTx.prototype.setFee = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 sequence = 5;
 * @return {number}
 */
proto.XrpCommand.XrpSignTx.prototype.getSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.XrpCommand.XrpSignTx.prototype.setSequence = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 last_ledger_sequence = 6;
 * @return {number}
 */
proto.XrpCommand.XrpSignTx.prototype.getLastLedgerSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.XrpCommand.XrpSignTx.prototype.setLastLedgerSequence = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bool testnet = 10;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.XrpCommand.prototype.getTestnet = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 10, false));
};


/** @param {boolean} value */
proto.XrpCommand.prototype.setTestnet = function(value) {
  jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional XrpGetPub get_pub = 1;
 * @return {?proto.XrpCommand.XrpGetPub}
 */
proto.XrpCommand.prototype.getGetPub = function() {
  return /** @type{?proto.XrpCommand.XrpGetPub} */ (
    jspb.Message.getWrapperField(this, proto.XrpCommand.XrpGetPub, 1));
};


/** @param {?proto.XrpCommand.XrpGetPub|undefined} value */
proto.XrpCommand.prototype.setGetPub = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.XrpCommand.oneofGroups_[0], value);
};


proto.XrpCommand.prototype.clearGetPub = function() {
  this.setGetPub(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.XrpCommand.prototype.hasGetPub = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional XrpShowAddr show_addr = 2;
 * @return {?proto.XrpCommand.XrpShowAddr}
 */
proto.XrpCommand.prototype.getShowAddr = function() {
  return /** @type{?proto.XrpCommand.XrpShowAddr} */ (
    jspb.Message.getWrapperField(this, proto.XrpCommand.XrpShowAddr, 2));
};


/** @param {?proto.XrpCommand.XrpShowAddr|undefined} value */
proto.XrpCommand.prototype.setShowAddr = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.XrpCommand.oneofGroups_[0], value);
};


proto.XrpCommand.prototype.clearShowAddr = function() {
  this.setShowAddr(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.XrpCommand.prototype.hasShowAddr = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional XrpSignTx sign_tx = 3;
 * @return {?proto.XrpCommand.XrpSignTx}
 */
proto.XrpCommand.prototype.getSignTx = function() {
  return /** @type{?proto.XrpCommand.XrpSignTx} */ (
    jspb.Message.getWrapperField(this, proto.XrpCommand.XrpSignTx, 3));
};


/** @param {?proto.XrpCommand.XrpSignTx|undefined} value */
proto.XrpCommand.prototype.setSignTx = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.XrpCommand.oneofGroups_[0], value);
};


proto.XrpCommand.prototype.clearSignTx = function() {
  this.setSignTx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.XrpCommand.prototype.hasSignTx = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.XrpResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.XrpResponse.oneofGroups_);
};
goog.inherits(proto.XrpResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.XrpResponse.displayName = 'proto.XrpResponse';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.XrpResponse.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.XrpResponse.MsgCase = {
  MSG_NOT_SET: 0,
  ERROR: 1,
  PK: 2,
  SIG: 3
};

/**
 * @return {proto.XrpResponse.MsgCase}
 */
proto.XrpResponse.prototype.getMsgCase = function() {
  return /** @type {proto.XrpResponse.MsgCase} */(jspb.Message.computeOneofCase(this, proto.XrpResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.XrpResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.XrpResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.XrpResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.XrpResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pk: (f = msg.getPk()) && proto.XrpResponse.XrpPublicKey.toObject(includeInstance, f),
    sig: (f = msg.getSig()) && proto.XrpResponse.XrpSig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.XrpResponse}
 */
proto.XrpResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.XrpResponse;
  return proto.XrpResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.XrpResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.XrpResponse}
 */
proto.XrpResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Error} */ (reader.readEnum());
      msg.setError(value);
      break;
    case 2:
      var value = new proto.XrpResponse.XrpPublicKey;
      reader.readMessage(value,proto.XrpResponse.XrpPublicKey.deserializeBinaryFromReader);
      msg.setPk(value);
      break;
    case 3:
      var value = new proto.XrpResponse.XrpSig;
      reader.readMessage(value,proto.XrpResponse.XrpSig.deserializeBinaryFromReader);
      msg.setSig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.XrpResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.XrpResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.XrpResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.XrpResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.Error} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getPk();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.XrpResponse.XrpPublicKey.serializeBinaryToWriter
    );
  }
  f = message.getSig();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.XrpResponse.XrpSig.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.XrpResponse.XrpPublicKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.XrpResponse.XrpPublicKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.XrpResponse.XrpPublicKey.displayName = 'proto.XrpResponse.XrpPublicKey';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.XrpResponse.XrpPublicKey.prototype.toObject = function(opt_includeInstance) {
  return proto.XrpResponse.XrpPublicKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.XrpResponse.XrpPublicKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.XrpResponse.XrpPublicKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    pubkey: msg.getPubkey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.XrpResponse.XrpPublicKey}
 */
proto.XrpResponse.XrpPublicKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.XrpResponse.XrpPublicKey;
  return proto.XrpResponse.XrpPublicKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.XrpResponse.XrpPublicKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.XrpResponse.XrpPublicKey}
 */
proto.XrpResponse.XrpPublicKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPubkey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.XrpResponse.XrpPublicKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.XrpResponse.XrpPublicKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.XrpResponse.XrpPublicKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.XrpResponse.XrpPublicKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPubkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes pubkey = 1;
 * @return {!(string|Uint8Array)}
 */
proto.XrpResponse.XrpPublicKey.prototype.getPubkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes pubkey = 1;
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {string}
 */
proto.XrpResponse.XrpPublicKey.prototype.getPubkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPubkey()));
};


/**
 * optional bytes pubkey = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {!Uint8Array}
 */
proto.XrpResponse.XrpPublicKey.prototype.getPubkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPubkey()));
};


/** @param {!(string|Uint8Array)} value */
proto.XrpResponse.XrpPublicKey.prototype.setPubkey = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.XrpResponse.XrpSig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.XrpResponse.XrpSig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.XrpResponse.XrpSig.displayName = 'proto.XrpResponse.XrpSig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.XrpResponse.XrpSig.prototype.toObject = function(opt_includeInstance) {
  return proto.XrpResponse.XrpSig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.XrpResponse.XrpSig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.XrpResponse.XrpSig.toObject = function(includeInstance, msg) {
  var f, obj = {
    sig: msg.getSig_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.XrpResponse.XrpSig}
 */
proto.XrpResponse.XrpSig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.XrpResponse.XrpSig;
  return proto.XrpResponse.XrpSig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.XrpResponse.XrpSig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.XrpResponse.XrpSig}
 */
proto.XrpResponse.XrpSig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.XrpResponse.XrpSig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.XrpResponse.XrpSig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.XrpResponse.XrpSig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.XrpResponse.XrpSig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes sig = 1;
 * @return {!(string|Uint8Array)}
 */
proto.XrpResponse.XrpSig.prototype.getSig = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes sig = 1;
 * This is a type-conversion wrapper around `getSig()`
 * @return {string}
 */
proto.XrpResponse.XrpSig.prototype.getSig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSig()));
};


/**
 * optional bytes sig = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSig()`
 * @return {!Uint8Array}
 */
proto.XrpResponse.XrpSig.prototype.getSig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSig()));
};


/** @param {!(string|Uint8Array)} value */
proto.XrpResponse.XrpSig.prototype.setSig = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional Error error = 1;
 * @return {!proto.Error}
 */
proto.XrpResponse.prototype.getError = function() {
  return /** @type {!proto.Error} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Error} value */
proto.XrpResponse.prototype.setError = function(value) {
  jspb.Message.setOneofField(this, 1, proto.XrpResponse.oneofGroups_[0], value);
};


proto.XrpResponse.prototype.clearError = function() {
  jspb.Message.setOneofField(this, 1, proto.XrpResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.XrpResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional XrpPublicKey pk = 2;
 * @return {?proto.XrpResponse.XrpPublicKey}
 */
proto.XrpResponse.prototype.getPk = function() {
  return /** @type{?proto.XrpResponse.XrpPublicKey} */ (
    jspb.Message.getWrapperField(this, proto.XrpResponse.XrpPublicKey, 2));
};


/** @param {?proto.XrpResponse.XrpPublicKey|undefined} value */
proto.XrpResponse.prototype.setPk = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.XrpResponse.oneofGroups_[0], value);
};


proto.XrpResponse.prototype.clearPk = function() {
  this.setPk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.XrpResponse.prototype.hasPk = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional XrpSig sig = 3;
 * @return {?proto.XrpResponse.XrpSig}
 */
proto.XrpResponse.prototype.getSig = function() {
  return /** @type{?proto.XrpResponse.XrpSig} */ (
    jspb.Message.getWrapperField(this, proto.XrpResponse.XrpSig, 3));
};


/** @param {?proto.XrpResponse.XrpSig|undefined} value */
proto.XrpResponse.prototype.setSig = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.XrpResponse.oneofGroups_[0], value);
};


proto.XrpResponse.prototype.clearSig = function() {
  this.setSig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.XrpResponse.prototype.hasSig = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto);
