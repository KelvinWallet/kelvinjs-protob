/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_pb = require('./common_pb.js');
goog.exportSymbol('proto.TrxCommand', null, global);
goog.exportSymbol('proto.TrxCommand.TrxGetPub', null, global);
goog.exportSymbol('proto.TrxCommand.TrxShowAddr', null, global);
goog.exportSymbol('proto.TrxCommand.TrxSignTx', null, global);
goog.exportSymbol('proto.TrxResponse', null, global);
goog.exportSymbol('proto.TrxResponse.TrxPublicKey', null, global);
goog.exportSymbol('proto.TrxResponse.TrxSig', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TrxCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.TrxCommand.oneofGroups_);
};
goog.inherits(proto.TrxCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TrxCommand.displayName = 'proto.TrxCommand';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.TrxCommand.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.TrxCommand.MsgCase = {
  MSG_NOT_SET: 0,
  GET_PUB: 1,
  SHOW_ADDR: 2,
  SIGN_TX: 3
};

/**
 * @return {proto.TrxCommand.MsgCase}
 */
proto.TrxCommand.prototype.getMsgCase = function() {
  return /** @type {proto.TrxCommand.MsgCase} */(jspb.Message.computeOneofCase(this, proto.TrxCommand.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TrxCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.TrxCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TrxCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TrxCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    getPub: (f = msg.getGetPub()) && proto.TrxCommand.TrxGetPub.toObject(includeInstance, f),
    showAddr: (f = msg.getShowAddr()) && proto.TrxCommand.TrxShowAddr.toObject(includeInstance, f),
    signTx: (f = msg.getSignTx()) && proto.TrxCommand.TrxSignTx.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TrxCommand}
 */
proto.TrxCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TrxCommand;
  return proto.TrxCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TrxCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TrxCommand}
 */
proto.TrxCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.TrxCommand.TrxGetPub;
      reader.readMessage(value,proto.TrxCommand.TrxGetPub.deserializeBinaryFromReader);
      msg.setGetPub(value);
      break;
    case 2:
      var value = new proto.TrxCommand.TrxShowAddr;
      reader.readMessage(value,proto.TrxCommand.TrxShowAddr.deserializeBinaryFromReader);
      msg.setShowAddr(value);
      break;
    case 3:
      var value = new proto.TrxCommand.TrxSignTx;
      reader.readMessage(value,proto.TrxCommand.TrxSignTx.deserializeBinaryFromReader);
      msg.setSignTx(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TrxCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TrxCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TrxCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TrxCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGetPub();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.TrxCommand.TrxGetPub.serializeBinaryToWriter
    );
  }
  f = message.getShowAddr();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.TrxCommand.TrxShowAddr.serializeBinaryToWriter
    );
  }
  f = message.getSignTx();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.TrxCommand.TrxSignTx.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TrxCommand.TrxGetPub = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TrxCommand.TrxGetPub.repeatedFields_, null);
};
goog.inherits(proto.TrxCommand.TrxGetPub, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TrxCommand.TrxGetPub.displayName = 'proto.TrxCommand.TrxGetPub';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TrxCommand.TrxGetPub.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TrxCommand.TrxGetPub.prototype.toObject = function(opt_includeInstance) {
  return proto.TrxCommand.TrxGetPub.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TrxCommand.TrxGetPub} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TrxCommand.TrxGetPub.toObject = function(includeInstance, msg) {
  var f, obj = {
    pathList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TrxCommand.TrxGetPub}
 */
proto.TrxCommand.TrxGetPub.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TrxCommand.TrxGetPub;
  return proto.TrxCommand.TrxGetPub.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TrxCommand.TrxGetPub} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TrxCommand.TrxGetPub}
 */
proto.TrxCommand.TrxGetPub.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setPathList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TrxCommand.TrxGetPub.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TrxCommand.TrxGetPub.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TrxCommand.TrxGetPub} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TrxCommand.TrxGetPub.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPathList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
};


/**
 * repeated uint32 path = 1;
 * @return {!Array<number>}
 */
proto.TrxCommand.TrxGetPub.prototype.getPathList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<number>} value */
proto.TrxCommand.TrxGetPub.prototype.setPathList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.TrxCommand.TrxGetPub.prototype.addPath = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.TrxCommand.TrxGetPub.prototype.clearPathList = function() {
  this.setPathList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TrxCommand.TrxShowAddr = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TrxCommand.TrxShowAddr.repeatedFields_, null);
};
goog.inherits(proto.TrxCommand.TrxShowAddr, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TrxCommand.TrxShowAddr.displayName = 'proto.TrxCommand.TrxShowAddr';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TrxCommand.TrxShowAddr.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TrxCommand.TrxShowAddr.prototype.toObject = function(opt_includeInstance) {
  return proto.TrxCommand.TrxShowAddr.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TrxCommand.TrxShowAddr} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TrxCommand.TrxShowAddr.toObject = function(includeInstance, msg) {
  var f, obj = {
    pathList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TrxCommand.TrxShowAddr}
 */
proto.TrxCommand.TrxShowAddr.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TrxCommand.TrxShowAddr;
  return proto.TrxCommand.TrxShowAddr.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TrxCommand.TrxShowAddr} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TrxCommand.TrxShowAddr}
 */
proto.TrxCommand.TrxShowAddr.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setPathList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TrxCommand.TrxShowAddr.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TrxCommand.TrxShowAddr.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TrxCommand.TrxShowAddr} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TrxCommand.TrxShowAddr.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPathList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
};


/**
 * repeated uint32 path = 1;
 * @return {!Array<number>}
 */
proto.TrxCommand.TrxShowAddr.prototype.getPathList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<number>} value */
proto.TrxCommand.TrxShowAddr.prototype.setPathList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.TrxCommand.TrxShowAddr.prototype.addPath = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.TrxCommand.TrxShowAddr.prototype.clearPathList = function() {
  this.setPathList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TrxCommand.TrxSignTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TrxCommand.TrxSignTx.repeatedFields_, null);
};
goog.inherits(proto.TrxCommand.TrxSignTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TrxCommand.TrxSignTx.displayName = 'proto.TrxCommand.TrxSignTx';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TrxCommand.TrxSignTx.repeatedFields_ = [10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TrxCommand.TrxSignTx.prototype.toObject = function(opt_includeInstance) {
  return proto.TrxCommand.TrxSignTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TrxCommand.TrxSignTx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TrxCommand.TrxSignTx.toObject = function(includeInstance, msg) {
  var f, obj = {
    pathList: jspb.Message.getRepeatedField(msg, 10),
    to: msg.getTo_asB64(),
    amount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    refBlockBytes: msg.getRefBlockBytes_asB64(),
    refBlockHash: msg.getRefBlockHash_asB64(),
    expiration: jspb.Message.getFieldWithDefault(msg, 5, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TrxCommand.TrxSignTx}
 */
proto.TrxCommand.TrxSignTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TrxCommand.TrxSignTx;
  return proto.TrxCommand.TrxSignTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TrxCommand.TrxSignTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TrxCommand.TrxSignTx}
 */
proto.TrxCommand.TrxSignTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 10:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setPathList(value);
      break;
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTo(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmount(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRefBlockBytes(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRefBlockHash(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setExpiration(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TrxCommand.TrxSignTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TrxCommand.TrxSignTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TrxCommand.TrxSignTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TrxCommand.TrxSignTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPathList();
  if (f.length > 0) {
    writer.writePackedUint32(
      10,
      f
    );
  }
  f = message.getTo_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getRefBlockBytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getRefBlockHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getExpiration();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
};


/**
 * repeated uint32 path = 10;
 * @return {!Array<number>}
 */
proto.TrxCommand.TrxSignTx.prototype.getPathList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 10));
};


/** @param {!Array<number>} value */
proto.TrxCommand.TrxSignTx.prototype.setPathList = function(value) {
  jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.TrxCommand.TrxSignTx.prototype.addPath = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


proto.TrxCommand.TrxSignTx.prototype.clearPathList = function() {
  this.setPathList([]);
};


/**
 * optional bytes to = 1;
 * @return {!(string|Uint8Array)}
 */
proto.TrxCommand.TrxSignTx.prototype.getTo = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes to = 1;
 * This is a type-conversion wrapper around `getTo()`
 * @return {string}
 */
proto.TrxCommand.TrxSignTx.prototype.getTo_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTo()));
};


/**
 * optional bytes to = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTo()`
 * @return {!Uint8Array}
 */
proto.TrxCommand.TrxSignTx.prototype.getTo_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTo()));
};


/** @param {!(string|Uint8Array)} value */
proto.TrxCommand.TrxSignTx.prototype.setTo = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 amount = 2;
 * @return {number}
 */
proto.TrxCommand.TrxSignTx.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.TrxCommand.TrxSignTx.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes ref_block_bytes = 3;
 * @return {!(string|Uint8Array)}
 */
proto.TrxCommand.TrxSignTx.prototype.getRefBlockBytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes ref_block_bytes = 3;
 * This is a type-conversion wrapper around `getRefBlockBytes()`
 * @return {string}
 */
proto.TrxCommand.TrxSignTx.prototype.getRefBlockBytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRefBlockBytes()));
};


/**
 * optional bytes ref_block_bytes = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRefBlockBytes()`
 * @return {!Uint8Array}
 */
proto.TrxCommand.TrxSignTx.prototype.getRefBlockBytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRefBlockBytes()));
};


/** @param {!(string|Uint8Array)} value */
proto.TrxCommand.TrxSignTx.prototype.setRefBlockBytes = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes ref_block_hash = 4;
 * @return {!(string|Uint8Array)}
 */
proto.TrxCommand.TrxSignTx.prototype.getRefBlockHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes ref_block_hash = 4;
 * This is a type-conversion wrapper around `getRefBlockHash()`
 * @return {string}
 */
proto.TrxCommand.TrxSignTx.prototype.getRefBlockHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRefBlockHash()));
};


/**
 * optional bytes ref_block_hash = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRefBlockHash()`
 * @return {!Uint8Array}
 */
proto.TrxCommand.TrxSignTx.prototype.getRefBlockHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRefBlockHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.TrxCommand.TrxSignTx.prototype.setRefBlockHash = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional uint64 expiration = 5;
 * @return {number}
 */
proto.TrxCommand.TrxSignTx.prototype.getExpiration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.TrxCommand.TrxSignTx.prototype.setExpiration = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 timestamp = 6;
 * @return {number}
 */
proto.TrxCommand.TrxSignTx.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.TrxCommand.TrxSignTx.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional TrxGetPub get_pub = 1;
 * @return {?proto.TrxCommand.TrxGetPub}
 */
proto.TrxCommand.prototype.getGetPub = function() {
  return /** @type{?proto.TrxCommand.TrxGetPub} */ (
    jspb.Message.getWrapperField(this, proto.TrxCommand.TrxGetPub, 1));
};


/** @param {?proto.TrxCommand.TrxGetPub|undefined} value */
proto.TrxCommand.prototype.setGetPub = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.TrxCommand.oneofGroups_[0], value);
};


proto.TrxCommand.prototype.clearGetPub = function() {
  this.setGetPub(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TrxCommand.prototype.hasGetPub = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TrxShowAddr show_addr = 2;
 * @return {?proto.TrxCommand.TrxShowAddr}
 */
proto.TrxCommand.prototype.getShowAddr = function() {
  return /** @type{?proto.TrxCommand.TrxShowAddr} */ (
    jspb.Message.getWrapperField(this, proto.TrxCommand.TrxShowAddr, 2));
};


/** @param {?proto.TrxCommand.TrxShowAddr|undefined} value */
proto.TrxCommand.prototype.setShowAddr = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.TrxCommand.oneofGroups_[0], value);
};


proto.TrxCommand.prototype.clearShowAddr = function() {
  this.setShowAddr(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TrxCommand.prototype.hasShowAddr = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TrxSignTx sign_tx = 3;
 * @return {?proto.TrxCommand.TrxSignTx}
 */
proto.TrxCommand.prototype.getSignTx = function() {
  return /** @type{?proto.TrxCommand.TrxSignTx} */ (
    jspb.Message.getWrapperField(this, proto.TrxCommand.TrxSignTx, 3));
};


/** @param {?proto.TrxCommand.TrxSignTx|undefined} value */
proto.TrxCommand.prototype.setSignTx = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.TrxCommand.oneofGroups_[0], value);
};


proto.TrxCommand.prototype.clearSignTx = function() {
  this.setSignTx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TrxCommand.prototype.hasSignTx = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TrxResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.TrxResponse.oneofGroups_);
};
goog.inherits(proto.TrxResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TrxResponse.displayName = 'proto.TrxResponse';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.TrxResponse.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.TrxResponse.MsgCase = {
  MSG_NOT_SET: 0,
  ERROR: 1,
  PK: 2,
  SIG: 3
};

/**
 * @return {proto.TrxResponse.MsgCase}
 */
proto.TrxResponse.prototype.getMsgCase = function() {
  return /** @type {proto.TrxResponse.MsgCase} */(jspb.Message.computeOneofCase(this, proto.TrxResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TrxResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.TrxResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TrxResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TrxResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pk: (f = msg.getPk()) && proto.TrxResponse.TrxPublicKey.toObject(includeInstance, f),
    sig: (f = msg.getSig()) && proto.TrxResponse.TrxSig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TrxResponse}
 */
proto.TrxResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TrxResponse;
  return proto.TrxResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TrxResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TrxResponse}
 */
proto.TrxResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Error} */ (reader.readEnum());
      msg.setError(value);
      break;
    case 2:
      var value = new proto.TrxResponse.TrxPublicKey;
      reader.readMessage(value,proto.TrxResponse.TrxPublicKey.deserializeBinaryFromReader);
      msg.setPk(value);
      break;
    case 3:
      var value = new proto.TrxResponse.TrxSig;
      reader.readMessage(value,proto.TrxResponse.TrxSig.deserializeBinaryFromReader);
      msg.setSig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TrxResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TrxResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TrxResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TrxResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.Error} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getPk();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.TrxResponse.TrxPublicKey.serializeBinaryToWriter
    );
  }
  f = message.getSig();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.TrxResponse.TrxSig.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TrxResponse.TrxPublicKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TrxResponse.TrxPublicKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TrxResponse.TrxPublicKey.displayName = 'proto.TrxResponse.TrxPublicKey';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TrxResponse.TrxPublicKey.prototype.toObject = function(opt_includeInstance) {
  return proto.TrxResponse.TrxPublicKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TrxResponse.TrxPublicKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TrxResponse.TrxPublicKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    pubkey: msg.getPubkey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TrxResponse.TrxPublicKey}
 */
proto.TrxResponse.TrxPublicKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TrxResponse.TrxPublicKey;
  return proto.TrxResponse.TrxPublicKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TrxResponse.TrxPublicKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TrxResponse.TrxPublicKey}
 */
proto.TrxResponse.TrxPublicKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPubkey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TrxResponse.TrxPublicKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TrxResponse.TrxPublicKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TrxResponse.TrxPublicKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TrxResponse.TrxPublicKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPubkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes pubkey = 1;
 * @return {!(string|Uint8Array)}
 */
proto.TrxResponse.TrxPublicKey.prototype.getPubkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes pubkey = 1;
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {string}
 */
proto.TrxResponse.TrxPublicKey.prototype.getPubkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPubkey()));
};


/**
 * optional bytes pubkey = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {!Uint8Array}
 */
proto.TrxResponse.TrxPublicKey.prototype.getPubkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPubkey()));
};


/** @param {!(string|Uint8Array)} value */
proto.TrxResponse.TrxPublicKey.prototype.setPubkey = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TrxResponse.TrxSig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TrxResponse.TrxSig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TrxResponse.TrxSig.displayName = 'proto.TrxResponse.TrxSig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TrxResponse.TrxSig.prototype.toObject = function(opt_includeInstance) {
  return proto.TrxResponse.TrxSig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TrxResponse.TrxSig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TrxResponse.TrxSig.toObject = function(includeInstance, msg) {
  var f, obj = {
    sig: msg.getSig_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TrxResponse.TrxSig}
 */
proto.TrxResponse.TrxSig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TrxResponse.TrxSig;
  return proto.TrxResponse.TrxSig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TrxResponse.TrxSig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TrxResponse.TrxSig}
 */
proto.TrxResponse.TrxSig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TrxResponse.TrxSig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TrxResponse.TrxSig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TrxResponse.TrxSig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TrxResponse.TrxSig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes sig = 1;
 * @return {!(string|Uint8Array)}
 */
proto.TrxResponse.TrxSig.prototype.getSig = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes sig = 1;
 * This is a type-conversion wrapper around `getSig()`
 * @return {string}
 */
proto.TrxResponse.TrxSig.prototype.getSig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSig()));
};


/**
 * optional bytes sig = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSig()`
 * @return {!Uint8Array}
 */
proto.TrxResponse.TrxSig.prototype.getSig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSig()));
};


/** @param {!(string|Uint8Array)} value */
proto.TrxResponse.TrxSig.prototype.setSig = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional Error error = 1;
 * @return {!proto.Error}
 */
proto.TrxResponse.prototype.getError = function() {
  return /** @type {!proto.Error} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Error} value */
proto.TrxResponse.prototype.setError = function(value) {
  jspb.Message.setOneofField(this, 1, proto.TrxResponse.oneofGroups_[0], value);
};


proto.TrxResponse.prototype.clearError = function() {
  jspb.Message.setOneofField(this, 1, proto.TrxResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TrxResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TrxPublicKey pk = 2;
 * @return {?proto.TrxResponse.TrxPublicKey}
 */
proto.TrxResponse.prototype.getPk = function() {
  return /** @type{?proto.TrxResponse.TrxPublicKey} */ (
    jspb.Message.getWrapperField(this, proto.TrxResponse.TrxPublicKey, 2));
};


/** @param {?proto.TrxResponse.TrxPublicKey|undefined} value */
proto.TrxResponse.prototype.setPk = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.TrxResponse.oneofGroups_[0], value);
};


proto.TrxResponse.prototype.clearPk = function() {
  this.setPk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TrxResponse.prototype.hasPk = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TrxSig sig = 3;
 * @return {?proto.TrxResponse.TrxSig}
 */
proto.TrxResponse.prototype.getSig = function() {
  return /** @type{?proto.TrxResponse.TrxSig} */ (
    jspb.Message.getWrapperField(this, proto.TrxResponse.TrxSig, 3));
};


/** @param {?proto.TrxResponse.TrxSig|undefined} value */
proto.TrxResponse.prototype.setSig = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.TrxResponse.oneofGroups_[0], value);
};


proto.TrxResponse.prototype.clearSig = function() {
  this.setSig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TrxResponse.prototype.hasSig = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto);
