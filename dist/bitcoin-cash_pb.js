/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_pb = require('./common_pb.js');
goog.exportSymbol('proto.BchCommand', null, global);
goog.exportSymbol('proto.BchCommand.BchAddrMode', null, global);
goog.exportSymbol('proto.BchCommand.BchGetXPub', null, global);
goog.exportSymbol('proto.BchCommand.BchShowAddr', null, global);
goog.exportSymbol('proto.BchCommand.BchSignTx', null, global);
goog.exportSymbol('proto.BchCommand.BchSignTx.BchChange', null, global);
goog.exportSymbol('proto.BchCommand.BchSignTx.BchTxIn', null, global);
goog.exportSymbol('proto.BchCommand.BchSignTx.BchTxOut', null, global);
goog.exportSymbol('proto.BchResponse', null, global);
goog.exportSymbol('proto.BchResponse.BchSignedTx', null, global);
goog.exportSymbol('proto.BchResponse.BchXPub', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BchCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.BchCommand.oneofGroups_);
};
goog.inherits(proto.BchCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BchCommand.displayName = 'proto.BchCommand';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.BchCommand.oneofGroups_ = [[2,3,4]];

/**
 * @enum {number}
 */
proto.BchCommand.MsgCase = {
  MSG_NOT_SET: 0,
  GET_XPUB: 2,
  SHOW_ADDR: 3,
  SIGN_TX: 4
};

/**
 * @return {proto.BchCommand.MsgCase}
 */
proto.BchCommand.prototype.getMsgCase = function() {
  return /** @type {proto.BchCommand.MsgCase} */(jspb.Message.computeOneofCase(this, proto.BchCommand.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BchCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.BchCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BchCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BchCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    testnet: jspb.Message.getFieldWithDefault(msg, 10, false),
    addrMode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    getXpub: (f = msg.getGetXpub()) && proto.BchCommand.BchGetXPub.toObject(includeInstance, f),
    showAddr: (f = msg.getShowAddr()) && proto.BchCommand.BchShowAddr.toObject(includeInstance, f),
    signTx: (f = msg.getSignTx()) && proto.BchCommand.BchSignTx.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BchCommand}
 */
proto.BchCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BchCommand;
  return proto.BchCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BchCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BchCommand}
 */
proto.BchCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTestnet(value);
      break;
    case 1:
      var value = /** @type {!proto.BchCommand.BchAddrMode} */ (reader.readEnum());
      msg.setAddrMode(value);
      break;
    case 2:
      var value = new proto.BchCommand.BchGetXPub;
      reader.readMessage(value,proto.BchCommand.BchGetXPub.deserializeBinaryFromReader);
      msg.setGetXpub(value);
      break;
    case 3:
      var value = new proto.BchCommand.BchShowAddr;
      reader.readMessage(value,proto.BchCommand.BchShowAddr.deserializeBinaryFromReader);
      msg.setShowAddr(value);
      break;
    case 4:
      var value = new proto.BchCommand.BchSignTx;
      reader.readMessage(value,proto.BchCommand.BchSignTx.deserializeBinaryFromReader);
      msg.setSignTx(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BchCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BchCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BchCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BchCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTestnet();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getAddrMode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getGetXpub();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.BchCommand.BchGetXPub.serializeBinaryToWriter
    );
  }
  f = message.getShowAddr();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.BchCommand.BchShowAddr.serializeBinaryToWriter
    );
  }
  f = message.getSignTx();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.BchCommand.BchSignTx.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.BchCommand.BchAddrMode = {
  CASHADDR: 0,
  LEGACY: 1
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BchCommand.BchGetXPub = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.BchCommand.BchGetXPub.repeatedFields_, null);
};
goog.inherits(proto.BchCommand.BchGetXPub, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BchCommand.BchGetXPub.displayName = 'proto.BchCommand.BchGetXPub';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.BchCommand.BchGetXPub.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BchCommand.BchGetXPub.prototype.toObject = function(opt_includeInstance) {
  return proto.BchCommand.BchGetXPub.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BchCommand.BchGetXPub} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BchCommand.BchGetXPub.toObject = function(includeInstance, msg) {
  var f, obj = {
    pathList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BchCommand.BchGetXPub}
 */
proto.BchCommand.BchGetXPub.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BchCommand.BchGetXPub;
  return proto.BchCommand.BchGetXPub.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BchCommand.BchGetXPub} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BchCommand.BchGetXPub}
 */
proto.BchCommand.BchGetXPub.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setPathList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BchCommand.BchGetXPub.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BchCommand.BchGetXPub.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BchCommand.BchGetXPub} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BchCommand.BchGetXPub.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPathList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
};


/**
 * repeated uint32 path = 1;
 * @return {!Array<number>}
 */
proto.BchCommand.BchGetXPub.prototype.getPathList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<number>} value */
proto.BchCommand.BchGetXPub.prototype.setPathList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.BchCommand.BchGetXPub.prototype.addPath = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.BchCommand.BchGetXPub.prototype.clearPathList = function() {
  this.setPathList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BchCommand.BchShowAddr = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.BchCommand.BchShowAddr.repeatedFields_, null);
};
goog.inherits(proto.BchCommand.BchShowAddr, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BchCommand.BchShowAddr.displayName = 'proto.BchCommand.BchShowAddr';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.BchCommand.BchShowAddr.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BchCommand.BchShowAddr.prototype.toObject = function(opt_includeInstance) {
  return proto.BchCommand.BchShowAddr.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BchCommand.BchShowAddr} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BchCommand.BchShowAddr.toObject = function(includeInstance, msg) {
  var f, obj = {
    pathList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BchCommand.BchShowAddr}
 */
proto.BchCommand.BchShowAddr.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BchCommand.BchShowAddr;
  return proto.BchCommand.BchShowAddr.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BchCommand.BchShowAddr} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BchCommand.BchShowAddr}
 */
proto.BchCommand.BchShowAddr.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setPathList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BchCommand.BchShowAddr.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BchCommand.BchShowAddr.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BchCommand.BchShowAddr} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BchCommand.BchShowAddr.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPathList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
};


/**
 * repeated uint32 path = 1;
 * @return {!Array<number>}
 */
proto.BchCommand.BchShowAddr.prototype.getPathList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<number>} value */
proto.BchCommand.BchShowAddr.prototype.setPathList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.BchCommand.BchShowAddr.prototype.addPath = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.BchCommand.BchShowAddr.prototype.clearPathList = function() {
  this.setPathList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BchCommand.BchSignTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.BchCommand.BchSignTx.repeatedFields_, null);
};
goog.inherits(proto.BchCommand.BchSignTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BchCommand.BchSignTx.displayName = 'proto.BchCommand.BchSignTx';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.BchCommand.BchSignTx.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BchCommand.BchSignTx.prototype.toObject = function(opt_includeInstance) {
  return proto.BchCommand.BchSignTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BchCommand.BchSignTx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BchCommand.BchSignTx.toObject = function(includeInstance, msg) {
  var f, obj = {
    inputsList: jspb.Message.toObjectList(msg.getInputsList(),
    proto.BchCommand.BchSignTx.BchTxIn.toObject, includeInstance),
    outputsList: jspb.Message.toObjectList(msg.getOutputsList(),
    proto.BchCommand.BchSignTx.BchTxOut.toObject, includeInstance),
    change: (f = msg.getChange()) && proto.BchCommand.BchSignTx.BchChange.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BchCommand.BchSignTx}
 */
proto.BchCommand.BchSignTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BchCommand.BchSignTx;
  return proto.BchCommand.BchSignTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BchCommand.BchSignTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BchCommand.BchSignTx}
 */
proto.BchCommand.BchSignTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.BchCommand.BchSignTx.BchTxIn;
      reader.readMessage(value,proto.BchCommand.BchSignTx.BchTxIn.deserializeBinaryFromReader);
      msg.addInputs(value);
      break;
    case 2:
      var value = new proto.BchCommand.BchSignTx.BchTxOut;
      reader.readMessage(value,proto.BchCommand.BchSignTx.BchTxOut.deserializeBinaryFromReader);
      msg.addOutputs(value);
      break;
    case 3:
      var value = new proto.BchCommand.BchSignTx.BchChange;
      reader.readMessage(value,proto.BchCommand.BchSignTx.BchChange.deserializeBinaryFromReader);
      msg.setChange(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BchCommand.BchSignTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BchCommand.BchSignTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BchCommand.BchSignTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BchCommand.BchSignTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.BchCommand.BchSignTx.BchTxIn.serializeBinaryToWriter
    );
  }
  f = message.getOutputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.BchCommand.BchSignTx.BchTxOut.serializeBinaryToWriter
    );
  }
  f = message.getChange();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.BchCommand.BchSignTx.BchChange.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BchCommand.BchSignTx.BchTxIn = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.BchCommand.BchSignTx.BchTxIn.repeatedFields_, null);
};
goog.inherits(proto.BchCommand.BchSignTx.BchTxIn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BchCommand.BchSignTx.BchTxIn.displayName = 'proto.BchCommand.BchSignTx.BchTxIn';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.BchCommand.BchSignTx.BchTxIn.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BchCommand.BchSignTx.BchTxIn.prototype.toObject = function(opt_includeInstance) {
  return proto.BchCommand.BchSignTx.BchTxIn.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BchCommand.BchSignTx.BchTxIn} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BchCommand.BchSignTx.BchTxIn.toObject = function(includeInstance, msg) {
  var f, obj = {
    pathList: jspb.Message.getRepeatedField(msg, 1),
    prevTid: msg.getPrevTid_asB64(),
    prevIndex: jspb.Message.getFieldWithDefault(msg, 3, 0),
    value: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BchCommand.BchSignTx.BchTxIn}
 */
proto.BchCommand.BchSignTx.BchTxIn.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BchCommand.BchSignTx.BchTxIn;
  return proto.BchCommand.BchSignTx.BchTxIn.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BchCommand.BchSignTx.BchTxIn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BchCommand.BchSignTx.BchTxIn}
 */
proto.BchCommand.BchSignTx.BchTxIn.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setPathList(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPrevTid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPrevIndex(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BchCommand.BchSignTx.BchTxIn.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BchCommand.BchSignTx.BchTxIn.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BchCommand.BchSignTx.BchTxIn} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BchCommand.BchSignTx.BchTxIn.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPathList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
  f = message.getPrevTid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getPrevIndex();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getValue();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * repeated uint32 path = 1;
 * @return {!Array<number>}
 */
proto.BchCommand.BchSignTx.BchTxIn.prototype.getPathList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<number>} value */
proto.BchCommand.BchSignTx.BchTxIn.prototype.setPathList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.BchCommand.BchSignTx.BchTxIn.prototype.addPath = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.BchCommand.BchSignTx.BchTxIn.prototype.clearPathList = function() {
  this.setPathList([]);
};


/**
 * optional bytes prev_tid = 2;
 * @return {!(string|Uint8Array)}
 */
proto.BchCommand.BchSignTx.BchTxIn.prototype.getPrevTid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes prev_tid = 2;
 * This is a type-conversion wrapper around `getPrevTid()`
 * @return {string}
 */
proto.BchCommand.BchSignTx.BchTxIn.prototype.getPrevTid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPrevTid()));
};


/**
 * optional bytes prev_tid = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPrevTid()`
 * @return {!Uint8Array}
 */
proto.BchCommand.BchSignTx.BchTxIn.prototype.getPrevTid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPrevTid()));
};


/** @param {!(string|Uint8Array)} value */
proto.BchCommand.BchSignTx.BchTxIn.prototype.setPrevTid = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint64 prev_index = 3;
 * @return {number}
 */
proto.BchCommand.BchSignTx.BchTxIn.prototype.getPrevIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.BchCommand.BchSignTx.BchTxIn.prototype.setPrevIndex = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 value = 4;
 * @return {number}
 */
proto.BchCommand.BchSignTx.BchTxIn.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.BchCommand.BchSignTx.BchTxIn.prototype.setValue = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BchCommand.BchSignTx.BchTxOut = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.BchCommand.BchSignTx.BchTxOut.oneofGroups_);
};
goog.inherits(proto.BchCommand.BchSignTx.BchTxOut, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BchCommand.BchSignTx.BchTxOut.displayName = 'proto.BchCommand.BchSignTx.BchTxOut';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.BchCommand.BchSignTx.BchTxOut.oneofGroups_ = [[2,3,6]];

/**
 * @enum {number}
 */
proto.BchCommand.BchSignTx.BchTxOut.PayToCase = {
  PAY_TO_NOT_SET: 0,
  P2PKH_PKHASH: 2,
  P2SH_SHASH: 3,
  UNKNOWN_SCRIPT: 6
};

/**
 * @return {proto.BchCommand.BchSignTx.BchTxOut.PayToCase}
 */
proto.BchCommand.BchSignTx.BchTxOut.prototype.getPayToCase = function() {
  return /** @type {proto.BchCommand.BchSignTx.BchTxOut.PayToCase} */(jspb.Message.computeOneofCase(this, proto.BchCommand.BchSignTx.BchTxOut.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BchCommand.BchSignTx.BchTxOut.prototype.toObject = function(opt_includeInstance) {
  return proto.BchCommand.BchSignTx.BchTxOut.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BchCommand.BchSignTx.BchTxOut} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BchCommand.BchSignTx.BchTxOut.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, 0),
    p2pkhPkhash: msg.getP2pkhPkhash_asB64(),
    p2shShash: msg.getP2shShash_asB64(),
    unknownScript: msg.getUnknownScript_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BchCommand.BchSignTx.BchTxOut}
 */
proto.BchCommand.BchSignTx.BchTxOut.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BchCommand.BchSignTx.BchTxOut;
  return proto.BchCommand.BchSignTx.BchTxOut.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BchCommand.BchSignTx.BchTxOut} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BchCommand.BchSignTx.BchTxOut}
 */
proto.BchCommand.BchSignTx.BchTxOut.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setP2pkhPkhash(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setP2shShash(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUnknownScript(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BchCommand.BchSignTx.BchTxOut.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BchCommand.BchSignTx.BchTxOut.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BchCommand.BchSignTx.BchTxOut} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BchCommand.BchSignTx.BchTxOut.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBytes(
      6,
      f
    );
  }
};


/**
 * optional uint64 value = 1;
 * @return {number}
 */
proto.BchCommand.BchSignTx.BchTxOut.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.BchCommand.BchSignTx.BchTxOut.prototype.setValue = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes p2pkh_pkhash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.BchCommand.BchSignTx.BchTxOut.prototype.getP2pkhPkhash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes p2pkh_pkhash = 2;
 * This is a type-conversion wrapper around `getP2pkhPkhash()`
 * @return {string}
 */
proto.BchCommand.BchSignTx.BchTxOut.prototype.getP2pkhPkhash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getP2pkhPkhash()));
};


/**
 * optional bytes p2pkh_pkhash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getP2pkhPkhash()`
 * @return {!Uint8Array}
 */
proto.BchCommand.BchSignTx.BchTxOut.prototype.getP2pkhPkhash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getP2pkhPkhash()));
};


/** @param {!(string|Uint8Array)} value */
proto.BchCommand.BchSignTx.BchTxOut.prototype.setP2pkhPkhash = function(value) {
  jspb.Message.setOneofField(this, 2, proto.BchCommand.BchSignTx.BchTxOut.oneofGroups_[0], value);
};


proto.BchCommand.BchSignTx.BchTxOut.prototype.clearP2pkhPkhash = function() {
  jspb.Message.setOneofField(this, 2, proto.BchCommand.BchSignTx.BchTxOut.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BchCommand.BchSignTx.BchTxOut.prototype.hasP2pkhPkhash = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes p2sh_shash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.BchCommand.BchSignTx.BchTxOut.prototype.getP2shShash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes p2sh_shash = 3;
 * This is a type-conversion wrapper around `getP2shShash()`
 * @return {string}
 */
proto.BchCommand.BchSignTx.BchTxOut.prototype.getP2shShash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getP2shShash()));
};


/**
 * optional bytes p2sh_shash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getP2shShash()`
 * @return {!Uint8Array}
 */
proto.BchCommand.BchSignTx.BchTxOut.prototype.getP2shShash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getP2shShash()));
};


/** @param {!(string|Uint8Array)} value */
proto.BchCommand.BchSignTx.BchTxOut.prototype.setP2shShash = function(value) {
  jspb.Message.setOneofField(this, 3, proto.BchCommand.BchSignTx.BchTxOut.oneofGroups_[0], value);
};


proto.BchCommand.BchSignTx.BchTxOut.prototype.clearP2shShash = function() {
  jspb.Message.setOneofField(this, 3, proto.BchCommand.BchSignTx.BchTxOut.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BchCommand.BchSignTx.BchTxOut.prototype.hasP2shShash = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes unknown_script = 6;
 * @return {!(string|Uint8Array)}
 */
proto.BchCommand.BchSignTx.BchTxOut.prototype.getUnknownScript = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes unknown_script = 6;
 * This is a type-conversion wrapper around `getUnknownScript()`
 * @return {string}
 */
proto.BchCommand.BchSignTx.BchTxOut.prototype.getUnknownScript_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUnknownScript()));
};


/**
 * optional bytes unknown_script = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUnknownScript()`
 * @return {!Uint8Array}
 */
proto.BchCommand.BchSignTx.BchTxOut.prototype.getUnknownScript_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUnknownScript()));
};


/** @param {!(string|Uint8Array)} value */
proto.BchCommand.BchSignTx.BchTxOut.prototype.setUnknownScript = function(value) {
  jspb.Message.setOneofField(this, 6, proto.BchCommand.BchSignTx.BchTxOut.oneofGroups_[0], value);
};


proto.BchCommand.BchSignTx.BchTxOut.prototype.clearUnknownScript = function() {
  jspb.Message.setOneofField(this, 6, proto.BchCommand.BchSignTx.BchTxOut.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BchCommand.BchSignTx.BchTxOut.prototype.hasUnknownScript = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BchCommand.BchSignTx.BchChange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BchCommand.BchSignTx.BchChange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BchCommand.BchSignTx.BchChange.displayName = 'proto.BchCommand.BchSignTx.BchChange';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BchCommand.BchSignTx.BchChange.prototype.toObject = function(opt_includeInstance) {
  return proto.BchCommand.BchSignTx.BchChange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BchCommand.BchSignTx.BchChange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BchCommand.BchSignTx.BchChange.toObject = function(includeInstance, msg) {
  var f, obj = {
    account: jspb.Message.getFieldWithDefault(msg, 1, 0),
    addressIndex: jspb.Message.getFieldWithDefault(msg, 2, 0),
    value: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BchCommand.BchSignTx.BchChange}
 */
proto.BchCommand.BchSignTx.BchChange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BchCommand.BchSignTx.BchChange;
  return proto.BchCommand.BchSignTx.BchChange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BchCommand.BchSignTx.BchChange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BchCommand.BchSignTx.BchChange}
 */
proto.BchCommand.BchSignTx.BchChange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAccount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAddressIndex(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BchCommand.BchSignTx.BchChange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BchCommand.BchSignTx.BchChange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BchCommand.BchSignTx.BchChange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BchCommand.BchSignTx.BchChange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccount();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getAddressIndex();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getValue();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional uint32 account = 1;
 * @return {number}
 */
proto.BchCommand.BchSignTx.BchChange.prototype.getAccount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.BchCommand.BchSignTx.BchChange.prototype.setAccount = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 address_index = 2;
 * @return {number}
 */
proto.BchCommand.BchSignTx.BchChange.prototype.getAddressIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.BchCommand.BchSignTx.BchChange.prototype.setAddressIndex = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 value = 3;
 * @return {number}
 */
proto.BchCommand.BchSignTx.BchChange.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.BchCommand.BchSignTx.BchChange.prototype.setValue = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated BchTxIn inputs = 1;
 * @return {!Array<!proto.BchCommand.BchSignTx.BchTxIn>}
 */
proto.BchCommand.BchSignTx.prototype.getInputsList = function() {
  return /** @type{!Array<!proto.BchCommand.BchSignTx.BchTxIn>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.BchCommand.BchSignTx.BchTxIn, 1));
};


/** @param {!Array<!proto.BchCommand.BchSignTx.BchTxIn>} value */
proto.BchCommand.BchSignTx.prototype.setInputsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.BchCommand.BchSignTx.BchTxIn=} opt_value
 * @param {number=} opt_index
 * @return {!proto.BchCommand.BchSignTx.BchTxIn}
 */
proto.BchCommand.BchSignTx.prototype.addInputs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.BchCommand.BchSignTx.BchTxIn, opt_index);
};


proto.BchCommand.BchSignTx.prototype.clearInputsList = function() {
  this.setInputsList([]);
};


/**
 * repeated BchTxOut outputs = 2;
 * @return {!Array<!proto.BchCommand.BchSignTx.BchTxOut>}
 */
proto.BchCommand.BchSignTx.prototype.getOutputsList = function() {
  return /** @type{!Array<!proto.BchCommand.BchSignTx.BchTxOut>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.BchCommand.BchSignTx.BchTxOut, 2));
};


/** @param {!Array<!proto.BchCommand.BchSignTx.BchTxOut>} value */
proto.BchCommand.BchSignTx.prototype.setOutputsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.BchCommand.BchSignTx.BchTxOut=} opt_value
 * @param {number=} opt_index
 * @return {!proto.BchCommand.BchSignTx.BchTxOut}
 */
proto.BchCommand.BchSignTx.prototype.addOutputs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.BchCommand.BchSignTx.BchTxOut, opt_index);
};


proto.BchCommand.BchSignTx.prototype.clearOutputsList = function() {
  this.setOutputsList([]);
};


/**
 * optional BchChange change = 3;
 * @return {?proto.BchCommand.BchSignTx.BchChange}
 */
proto.BchCommand.BchSignTx.prototype.getChange = function() {
  return /** @type{?proto.BchCommand.BchSignTx.BchChange} */ (
    jspb.Message.getWrapperField(this, proto.BchCommand.BchSignTx.BchChange, 3));
};


/** @param {?proto.BchCommand.BchSignTx.BchChange|undefined} value */
proto.BchCommand.BchSignTx.prototype.setChange = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.BchCommand.BchSignTx.prototype.clearChange = function() {
  this.setChange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BchCommand.BchSignTx.prototype.hasChange = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool testnet = 10;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.BchCommand.prototype.getTestnet = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 10, false));
};


/** @param {boolean} value */
proto.BchCommand.prototype.setTestnet = function(value) {
  jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional BchAddrMode addr_mode = 1;
 * @return {!proto.BchCommand.BchAddrMode}
 */
proto.BchCommand.prototype.getAddrMode = function() {
  return /** @type {!proto.BchCommand.BchAddrMode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.BchCommand.BchAddrMode} value */
proto.BchCommand.prototype.setAddrMode = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional BchGetXPub get_xpub = 2;
 * @return {?proto.BchCommand.BchGetXPub}
 */
proto.BchCommand.prototype.getGetXpub = function() {
  return /** @type{?proto.BchCommand.BchGetXPub} */ (
    jspb.Message.getWrapperField(this, proto.BchCommand.BchGetXPub, 2));
};


/** @param {?proto.BchCommand.BchGetXPub|undefined} value */
proto.BchCommand.prototype.setGetXpub = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.BchCommand.oneofGroups_[0], value);
};


proto.BchCommand.prototype.clearGetXpub = function() {
  this.setGetXpub(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BchCommand.prototype.hasGetXpub = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional BchShowAddr show_addr = 3;
 * @return {?proto.BchCommand.BchShowAddr}
 */
proto.BchCommand.prototype.getShowAddr = function() {
  return /** @type{?proto.BchCommand.BchShowAddr} */ (
    jspb.Message.getWrapperField(this, proto.BchCommand.BchShowAddr, 3));
};


/** @param {?proto.BchCommand.BchShowAddr|undefined} value */
proto.BchCommand.prototype.setShowAddr = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.BchCommand.oneofGroups_[0], value);
};


proto.BchCommand.prototype.clearShowAddr = function() {
  this.setShowAddr(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BchCommand.prototype.hasShowAddr = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional BchSignTx sign_tx = 4;
 * @return {?proto.BchCommand.BchSignTx}
 */
proto.BchCommand.prototype.getSignTx = function() {
  return /** @type{?proto.BchCommand.BchSignTx} */ (
    jspb.Message.getWrapperField(this, proto.BchCommand.BchSignTx, 4));
};


/** @param {?proto.BchCommand.BchSignTx|undefined} value */
proto.BchCommand.prototype.setSignTx = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.BchCommand.oneofGroups_[0], value);
};


proto.BchCommand.prototype.clearSignTx = function() {
  this.setSignTx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BchCommand.prototype.hasSignTx = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BchResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.BchResponse.oneofGroups_);
};
goog.inherits(proto.BchResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BchResponse.displayName = 'proto.BchResponse';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.BchResponse.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.BchResponse.MsgCase = {
  MSG_NOT_SET: 0,
  ERROR: 1,
  XPUB: 2,
  SIGNED_TX: 3
};

/**
 * @return {proto.BchResponse.MsgCase}
 */
proto.BchResponse.prototype.getMsgCase = function() {
  return /** @type {proto.BchResponse.MsgCase} */(jspb.Message.computeOneofCase(this, proto.BchResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BchResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.BchResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BchResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BchResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: jspb.Message.getFieldWithDefault(msg, 1, 0),
    xpub: (f = msg.getXpub()) && proto.BchResponse.BchXPub.toObject(includeInstance, f),
    signedTx: (f = msg.getSignedTx()) && proto.BchResponse.BchSignedTx.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BchResponse}
 */
proto.BchResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BchResponse;
  return proto.BchResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BchResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BchResponse}
 */
proto.BchResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Error} */ (reader.readEnum());
      msg.setError(value);
      break;
    case 2:
      var value = new proto.BchResponse.BchXPub;
      reader.readMessage(value,proto.BchResponse.BchXPub.deserializeBinaryFromReader);
      msg.setXpub(value);
      break;
    case 3:
      var value = new proto.BchResponse.BchSignedTx;
      reader.readMessage(value,proto.BchResponse.BchSignedTx.deserializeBinaryFromReader);
      msg.setSignedTx(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BchResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BchResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BchResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BchResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.Error} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getXpub();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.BchResponse.BchXPub.serializeBinaryToWriter
    );
  }
  f = message.getSignedTx();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.BchResponse.BchSignedTx.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BchResponse.BchXPub = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BchResponse.BchXPub, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BchResponse.BchXPub.displayName = 'proto.BchResponse.BchXPub';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BchResponse.BchXPub.prototype.toObject = function(opt_includeInstance) {
  return proto.BchResponse.BchXPub.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BchResponse.BchXPub} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BchResponse.BchXPub.toObject = function(includeInstance, msg) {
  var f, obj = {
    xpub: msg.getXpub_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BchResponse.BchXPub}
 */
proto.BchResponse.BchXPub.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BchResponse.BchXPub;
  return proto.BchResponse.BchXPub.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BchResponse.BchXPub} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BchResponse.BchXPub}
 */
proto.BchResponse.BchXPub.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setXpub(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BchResponse.BchXPub.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BchResponse.BchXPub.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BchResponse.BchXPub} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BchResponse.BchXPub.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getXpub_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes xpub = 1;
 * @return {!(string|Uint8Array)}
 */
proto.BchResponse.BchXPub.prototype.getXpub = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes xpub = 1;
 * This is a type-conversion wrapper around `getXpub()`
 * @return {string}
 */
proto.BchResponse.BchXPub.prototype.getXpub_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getXpub()));
};


/**
 * optional bytes xpub = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getXpub()`
 * @return {!Uint8Array}
 */
proto.BchResponse.BchXPub.prototype.getXpub_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getXpub()));
};


/** @param {!(string|Uint8Array)} value */
proto.BchResponse.BchXPub.prototype.setXpub = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BchResponse.BchSignedTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BchResponse.BchSignedTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BchResponse.BchSignedTx.displayName = 'proto.BchResponse.BchSignedTx';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BchResponse.BchSignedTx.prototype.toObject = function(opt_includeInstance) {
  return proto.BchResponse.BchSignedTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BchResponse.BchSignedTx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BchResponse.BchSignedTx.toObject = function(includeInstance, msg) {
  var f, obj = {
    rawtx: msg.getRawtx_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BchResponse.BchSignedTx}
 */
proto.BchResponse.BchSignedTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BchResponse.BchSignedTx;
  return proto.BchResponse.BchSignedTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BchResponse.BchSignedTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BchResponse.BchSignedTx}
 */
proto.BchResponse.BchSignedTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRawtx(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BchResponse.BchSignedTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BchResponse.BchSignedTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BchResponse.BchSignedTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BchResponse.BchSignedTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRawtx_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes rawtx = 1;
 * @return {!(string|Uint8Array)}
 */
proto.BchResponse.BchSignedTx.prototype.getRawtx = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes rawtx = 1;
 * This is a type-conversion wrapper around `getRawtx()`
 * @return {string}
 */
proto.BchResponse.BchSignedTx.prototype.getRawtx_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRawtx()));
};


/**
 * optional bytes rawtx = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRawtx()`
 * @return {!Uint8Array}
 */
proto.BchResponse.BchSignedTx.prototype.getRawtx_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRawtx()));
};


/** @param {!(string|Uint8Array)} value */
proto.BchResponse.BchSignedTx.prototype.setRawtx = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional Error error = 1;
 * @return {!proto.Error}
 */
proto.BchResponse.prototype.getError = function() {
  return /** @type {!proto.Error} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Error} value */
proto.BchResponse.prototype.setError = function(value) {
  jspb.Message.setOneofField(this, 1, proto.BchResponse.oneofGroups_[0], value);
};


proto.BchResponse.prototype.clearError = function() {
  jspb.Message.setOneofField(this, 1, proto.BchResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BchResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional BchXPub xpub = 2;
 * @return {?proto.BchResponse.BchXPub}
 */
proto.BchResponse.prototype.getXpub = function() {
  return /** @type{?proto.BchResponse.BchXPub} */ (
    jspb.Message.getWrapperField(this, proto.BchResponse.BchXPub, 2));
};


/** @param {?proto.BchResponse.BchXPub|undefined} value */
proto.BchResponse.prototype.setXpub = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.BchResponse.oneofGroups_[0], value);
};


proto.BchResponse.prototype.clearXpub = function() {
  this.setXpub(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BchResponse.prototype.hasXpub = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional BchSignedTx signed_tx = 3;
 * @return {?proto.BchResponse.BchSignedTx}
 */
proto.BchResponse.prototype.getSignedTx = function() {
  return /** @type{?proto.BchResponse.BchSignedTx} */ (
    jspb.Message.getWrapperField(this, proto.BchResponse.BchSignedTx, 3));
};


/** @param {?proto.BchResponse.BchSignedTx|undefined} value */
proto.BchResponse.prototype.setSignedTx = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.BchResponse.oneofGroups_[0], value);
};


proto.BchResponse.prototype.clearSignedTx = function() {
  this.setSignedTx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BchResponse.prototype.hasSignedTx = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto);
