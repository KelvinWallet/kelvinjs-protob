/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_pb = require('./common_pb.js');
goog.exportSymbol('proto.BtcCommand', null, global);
goog.exportSymbol('proto.BtcCommand.BtcGetXPub', null, global);
goog.exportSymbol('proto.BtcCommand.BtcMode', null, global);
goog.exportSymbol('proto.BtcCommand.BtcShowAddr', null, global);
goog.exportSymbol('proto.BtcCommand.BtcSignTx', null, global);
goog.exportSymbol('proto.BtcCommand.BtcSignTx.BtcChange', null, global);
goog.exportSymbol('proto.BtcCommand.BtcSignTx.BtcTxIn', null, global);
goog.exportSymbol('proto.BtcCommand.BtcSignTx.BtcTxOut', null, global);
goog.exportSymbol('proto.BtcResponse', null, global);
goog.exportSymbol('proto.BtcResponse.BtcSignedTx', null, global);
goog.exportSymbol('proto.BtcResponse.BtcXPub', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BtcCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.BtcCommand.oneofGroups_);
};
goog.inherits(proto.BtcCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BtcCommand.displayName = 'proto.BtcCommand';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.BtcCommand.oneofGroups_ = [[2,3,4]];

/**
 * @enum {number}
 */
proto.BtcCommand.MsgCase = {
  MSG_NOT_SET: 0,
  GET_XPUB: 2,
  SHOW_ADDR: 3,
  SIGN_TX: 4
};

/**
 * @return {proto.BtcCommand.MsgCase}
 */
proto.BtcCommand.prototype.getMsgCase = function() {
  return /** @type {proto.BtcCommand.MsgCase} */(jspb.Message.computeOneofCase(this, proto.BtcCommand.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BtcCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.BtcCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BtcCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BtcCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    testnet: jspb.Message.getFieldWithDefault(msg, 10, false),
    mode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    getXpub: (f = msg.getGetXpub()) && proto.BtcCommand.BtcGetXPub.toObject(includeInstance, f),
    showAddr: (f = msg.getShowAddr()) && proto.BtcCommand.BtcShowAddr.toObject(includeInstance, f),
    signTx: (f = msg.getSignTx()) && proto.BtcCommand.BtcSignTx.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BtcCommand}
 */
proto.BtcCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BtcCommand;
  return proto.BtcCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BtcCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BtcCommand}
 */
proto.BtcCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTestnet(value);
      break;
    case 1:
      var value = /** @type {!proto.BtcCommand.BtcMode} */ (reader.readEnum());
      msg.setMode(value);
      break;
    case 2:
      var value = new proto.BtcCommand.BtcGetXPub;
      reader.readMessage(value,proto.BtcCommand.BtcGetXPub.deserializeBinaryFromReader);
      msg.setGetXpub(value);
      break;
    case 3:
      var value = new proto.BtcCommand.BtcShowAddr;
      reader.readMessage(value,proto.BtcCommand.BtcShowAddr.deserializeBinaryFromReader);
      msg.setShowAddr(value);
      break;
    case 4:
      var value = new proto.BtcCommand.BtcSignTx;
      reader.readMessage(value,proto.BtcCommand.BtcSignTx.deserializeBinaryFromReader);
      msg.setSignTx(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BtcCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BtcCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BtcCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BtcCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTestnet();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getMode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getGetXpub();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.BtcCommand.BtcGetXPub.serializeBinaryToWriter
    );
  }
  f = message.getShowAddr();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.BtcCommand.BtcShowAddr.serializeBinaryToWriter
    );
  }
  f = message.getSignTx();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.BtcCommand.BtcSignTx.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.BtcCommand.BtcMode = {
  P2PKH: 0,
  P2WPKH: 1,
  P2SH_P2WPKH: 2
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BtcCommand.BtcGetXPub = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.BtcCommand.BtcGetXPub.repeatedFields_, null);
};
goog.inherits(proto.BtcCommand.BtcGetXPub, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BtcCommand.BtcGetXPub.displayName = 'proto.BtcCommand.BtcGetXPub';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.BtcCommand.BtcGetXPub.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BtcCommand.BtcGetXPub.prototype.toObject = function(opt_includeInstance) {
  return proto.BtcCommand.BtcGetXPub.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BtcCommand.BtcGetXPub} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BtcCommand.BtcGetXPub.toObject = function(includeInstance, msg) {
  var f, obj = {
    pathList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BtcCommand.BtcGetXPub}
 */
proto.BtcCommand.BtcGetXPub.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BtcCommand.BtcGetXPub;
  return proto.BtcCommand.BtcGetXPub.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BtcCommand.BtcGetXPub} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BtcCommand.BtcGetXPub}
 */
proto.BtcCommand.BtcGetXPub.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setPathList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BtcCommand.BtcGetXPub.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BtcCommand.BtcGetXPub.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BtcCommand.BtcGetXPub} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BtcCommand.BtcGetXPub.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPathList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
};


/**
 * repeated uint32 path = 1;
 * @return {!Array<number>}
 */
proto.BtcCommand.BtcGetXPub.prototype.getPathList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<number>} value */
proto.BtcCommand.BtcGetXPub.prototype.setPathList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.BtcCommand.BtcGetXPub.prototype.addPath = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.BtcCommand.BtcGetXPub.prototype.clearPathList = function() {
  this.setPathList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BtcCommand.BtcShowAddr = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.BtcCommand.BtcShowAddr.repeatedFields_, null);
};
goog.inherits(proto.BtcCommand.BtcShowAddr, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BtcCommand.BtcShowAddr.displayName = 'proto.BtcCommand.BtcShowAddr';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.BtcCommand.BtcShowAddr.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BtcCommand.BtcShowAddr.prototype.toObject = function(opt_includeInstance) {
  return proto.BtcCommand.BtcShowAddr.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BtcCommand.BtcShowAddr} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BtcCommand.BtcShowAddr.toObject = function(includeInstance, msg) {
  var f, obj = {
    pathList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BtcCommand.BtcShowAddr}
 */
proto.BtcCommand.BtcShowAddr.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BtcCommand.BtcShowAddr;
  return proto.BtcCommand.BtcShowAddr.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BtcCommand.BtcShowAddr} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BtcCommand.BtcShowAddr}
 */
proto.BtcCommand.BtcShowAddr.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setPathList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BtcCommand.BtcShowAddr.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BtcCommand.BtcShowAddr.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BtcCommand.BtcShowAddr} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BtcCommand.BtcShowAddr.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPathList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
};


/**
 * repeated uint32 path = 1;
 * @return {!Array<number>}
 */
proto.BtcCommand.BtcShowAddr.prototype.getPathList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<number>} value */
proto.BtcCommand.BtcShowAddr.prototype.setPathList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.BtcCommand.BtcShowAddr.prototype.addPath = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.BtcCommand.BtcShowAddr.prototype.clearPathList = function() {
  this.setPathList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BtcCommand.BtcSignTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.BtcCommand.BtcSignTx.repeatedFields_, null);
};
goog.inherits(proto.BtcCommand.BtcSignTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BtcCommand.BtcSignTx.displayName = 'proto.BtcCommand.BtcSignTx';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.BtcCommand.BtcSignTx.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BtcCommand.BtcSignTx.prototype.toObject = function(opt_includeInstance) {
  return proto.BtcCommand.BtcSignTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BtcCommand.BtcSignTx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BtcCommand.BtcSignTx.toObject = function(includeInstance, msg) {
  var f, obj = {
    inputsList: jspb.Message.toObjectList(msg.getInputsList(),
    proto.BtcCommand.BtcSignTx.BtcTxIn.toObject, includeInstance),
    outputsList: jspb.Message.toObjectList(msg.getOutputsList(),
    proto.BtcCommand.BtcSignTx.BtcTxOut.toObject, includeInstance),
    change: (f = msg.getChange()) && proto.BtcCommand.BtcSignTx.BtcChange.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BtcCommand.BtcSignTx}
 */
proto.BtcCommand.BtcSignTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BtcCommand.BtcSignTx;
  return proto.BtcCommand.BtcSignTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BtcCommand.BtcSignTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BtcCommand.BtcSignTx}
 */
proto.BtcCommand.BtcSignTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.BtcCommand.BtcSignTx.BtcTxIn;
      reader.readMessage(value,proto.BtcCommand.BtcSignTx.BtcTxIn.deserializeBinaryFromReader);
      msg.addInputs(value);
      break;
    case 2:
      var value = new proto.BtcCommand.BtcSignTx.BtcTxOut;
      reader.readMessage(value,proto.BtcCommand.BtcSignTx.BtcTxOut.deserializeBinaryFromReader);
      msg.addOutputs(value);
      break;
    case 3:
      var value = new proto.BtcCommand.BtcSignTx.BtcChange;
      reader.readMessage(value,proto.BtcCommand.BtcSignTx.BtcChange.deserializeBinaryFromReader);
      msg.setChange(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BtcCommand.BtcSignTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BtcCommand.BtcSignTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BtcCommand.BtcSignTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BtcCommand.BtcSignTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.BtcCommand.BtcSignTx.BtcTxIn.serializeBinaryToWriter
    );
  }
  f = message.getOutputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.BtcCommand.BtcSignTx.BtcTxOut.serializeBinaryToWriter
    );
  }
  f = message.getChange();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.BtcCommand.BtcSignTx.BtcChange.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BtcCommand.BtcSignTx.BtcTxIn = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.BtcCommand.BtcSignTx.BtcTxIn.repeatedFields_, null);
};
goog.inherits(proto.BtcCommand.BtcSignTx.BtcTxIn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BtcCommand.BtcSignTx.BtcTxIn.displayName = 'proto.BtcCommand.BtcSignTx.BtcTxIn';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.BtcCommand.BtcSignTx.BtcTxIn.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BtcCommand.BtcSignTx.BtcTxIn.prototype.toObject = function(opt_includeInstance) {
  return proto.BtcCommand.BtcSignTx.BtcTxIn.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BtcCommand.BtcSignTx.BtcTxIn} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BtcCommand.BtcSignTx.BtcTxIn.toObject = function(includeInstance, msg) {
  var f, obj = {
    pathList: jspb.Message.getRepeatedField(msg, 1),
    prevTid: msg.getPrevTid_asB64(),
    prevIndex: jspb.Message.getFieldWithDefault(msg, 3, 0),
    value: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BtcCommand.BtcSignTx.BtcTxIn}
 */
proto.BtcCommand.BtcSignTx.BtcTxIn.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BtcCommand.BtcSignTx.BtcTxIn;
  return proto.BtcCommand.BtcSignTx.BtcTxIn.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BtcCommand.BtcSignTx.BtcTxIn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BtcCommand.BtcSignTx.BtcTxIn}
 */
proto.BtcCommand.BtcSignTx.BtcTxIn.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setPathList(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPrevTid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPrevIndex(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BtcCommand.BtcSignTx.BtcTxIn.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BtcCommand.BtcSignTx.BtcTxIn.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BtcCommand.BtcSignTx.BtcTxIn} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BtcCommand.BtcSignTx.BtcTxIn.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPathList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
  f = message.getPrevTid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getPrevIndex();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getValue();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * repeated uint32 path = 1;
 * @return {!Array<number>}
 */
proto.BtcCommand.BtcSignTx.BtcTxIn.prototype.getPathList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<number>} value */
proto.BtcCommand.BtcSignTx.BtcTxIn.prototype.setPathList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.BtcCommand.BtcSignTx.BtcTxIn.prototype.addPath = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.BtcCommand.BtcSignTx.BtcTxIn.prototype.clearPathList = function() {
  this.setPathList([]);
};


/**
 * optional bytes prev_tid = 2;
 * @return {!(string|Uint8Array)}
 */
proto.BtcCommand.BtcSignTx.BtcTxIn.prototype.getPrevTid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes prev_tid = 2;
 * This is a type-conversion wrapper around `getPrevTid()`
 * @return {string}
 */
proto.BtcCommand.BtcSignTx.BtcTxIn.prototype.getPrevTid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPrevTid()));
};


/**
 * optional bytes prev_tid = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPrevTid()`
 * @return {!Uint8Array}
 */
proto.BtcCommand.BtcSignTx.BtcTxIn.prototype.getPrevTid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPrevTid()));
};


/** @param {!(string|Uint8Array)} value */
proto.BtcCommand.BtcSignTx.BtcTxIn.prototype.setPrevTid = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint64 prev_index = 3;
 * @return {number}
 */
proto.BtcCommand.BtcSignTx.BtcTxIn.prototype.getPrevIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.BtcCommand.BtcSignTx.BtcTxIn.prototype.setPrevIndex = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 value = 4;
 * @return {number}
 */
proto.BtcCommand.BtcSignTx.BtcTxIn.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.BtcCommand.BtcSignTx.BtcTxIn.prototype.setValue = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BtcCommand.BtcSignTx.BtcTxOut = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.BtcCommand.BtcSignTx.BtcTxOut.oneofGroups_);
};
goog.inherits(proto.BtcCommand.BtcSignTx.BtcTxOut, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BtcCommand.BtcSignTx.BtcTxOut.displayName = 'proto.BtcCommand.BtcSignTx.BtcTxOut';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.BtcCommand.BtcSignTx.BtcTxOut.oneofGroups_ = [[2,3,4,5,6]];

/**
 * @enum {number}
 */
proto.BtcCommand.BtcSignTx.BtcTxOut.PayToCase = {
  PAY_TO_NOT_SET: 0,
  P2PKH_PKHASH: 2,
  P2SH_SHASH: 3,
  P2WPKH_PKHASH: 4,
  P2WSH_SHASH: 5,
  UNKNOWN_SCRIPT: 6
};

/**
 * @return {proto.BtcCommand.BtcSignTx.BtcTxOut.PayToCase}
 */
proto.BtcCommand.BtcSignTx.BtcTxOut.prototype.getPayToCase = function() {
  return /** @type {proto.BtcCommand.BtcSignTx.BtcTxOut.PayToCase} */(jspb.Message.computeOneofCase(this, proto.BtcCommand.BtcSignTx.BtcTxOut.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BtcCommand.BtcSignTx.BtcTxOut.prototype.toObject = function(opt_includeInstance) {
  return proto.BtcCommand.BtcSignTx.BtcTxOut.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BtcCommand.BtcSignTx.BtcTxOut} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BtcCommand.BtcSignTx.BtcTxOut.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, 0),
    p2pkhPkhash: msg.getP2pkhPkhash_asB64(),
    p2shShash: msg.getP2shShash_asB64(),
    p2wpkhPkhash: msg.getP2wpkhPkhash_asB64(),
    p2wshShash: msg.getP2wshShash_asB64(),
    unknownScript: msg.getUnknownScript_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BtcCommand.BtcSignTx.BtcTxOut}
 */
proto.BtcCommand.BtcSignTx.BtcTxOut.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BtcCommand.BtcSignTx.BtcTxOut;
  return proto.BtcCommand.BtcSignTx.BtcTxOut.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BtcCommand.BtcSignTx.BtcTxOut} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BtcCommand.BtcSignTx.BtcTxOut}
 */
proto.BtcCommand.BtcSignTx.BtcTxOut.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setP2pkhPkhash(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setP2shShash(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setP2wpkhPkhash(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setP2wshShash(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUnknownScript(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BtcCommand.BtcSignTx.BtcTxOut.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BtcCommand.BtcSignTx.BtcTxOut.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BtcCommand.BtcSignTx.BtcTxOut} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BtcCommand.BtcSignTx.BtcTxOut.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBytes(
      6,
      f
    );
  }
};


/**
 * optional uint64 value = 1;
 * @return {number}
 */
proto.BtcCommand.BtcSignTx.BtcTxOut.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.BtcCommand.BtcSignTx.BtcTxOut.prototype.setValue = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes p2pkh_pkhash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.BtcCommand.BtcSignTx.BtcTxOut.prototype.getP2pkhPkhash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes p2pkh_pkhash = 2;
 * This is a type-conversion wrapper around `getP2pkhPkhash()`
 * @return {string}
 */
proto.BtcCommand.BtcSignTx.BtcTxOut.prototype.getP2pkhPkhash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getP2pkhPkhash()));
};


/**
 * optional bytes p2pkh_pkhash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getP2pkhPkhash()`
 * @return {!Uint8Array}
 */
proto.BtcCommand.BtcSignTx.BtcTxOut.prototype.getP2pkhPkhash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getP2pkhPkhash()));
};


/** @param {!(string|Uint8Array)} value */
proto.BtcCommand.BtcSignTx.BtcTxOut.prototype.setP2pkhPkhash = function(value) {
  jspb.Message.setOneofField(this, 2, proto.BtcCommand.BtcSignTx.BtcTxOut.oneofGroups_[0], value);
};


proto.BtcCommand.BtcSignTx.BtcTxOut.prototype.clearP2pkhPkhash = function() {
  jspb.Message.setOneofField(this, 2, proto.BtcCommand.BtcSignTx.BtcTxOut.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BtcCommand.BtcSignTx.BtcTxOut.prototype.hasP2pkhPkhash = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes p2sh_shash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.BtcCommand.BtcSignTx.BtcTxOut.prototype.getP2shShash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes p2sh_shash = 3;
 * This is a type-conversion wrapper around `getP2shShash()`
 * @return {string}
 */
proto.BtcCommand.BtcSignTx.BtcTxOut.prototype.getP2shShash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getP2shShash()));
};


/**
 * optional bytes p2sh_shash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getP2shShash()`
 * @return {!Uint8Array}
 */
proto.BtcCommand.BtcSignTx.BtcTxOut.prototype.getP2shShash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getP2shShash()));
};


/** @param {!(string|Uint8Array)} value */
proto.BtcCommand.BtcSignTx.BtcTxOut.prototype.setP2shShash = function(value) {
  jspb.Message.setOneofField(this, 3, proto.BtcCommand.BtcSignTx.BtcTxOut.oneofGroups_[0], value);
};


proto.BtcCommand.BtcSignTx.BtcTxOut.prototype.clearP2shShash = function() {
  jspb.Message.setOneofField(this, 3, proto.BtcCommand.BtcSignTx.BtcTxOut.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BtcCommand.BtcSignTx.BtcTxOut.prototype.hasP2shShash = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes p2wpkh_pkhash = 4;
 * @return {!(string|Uint8Array)}
 */
proto.BtcCommand.BtcSignTx.BtcTxOut.prototype.getP2wpkhPkhash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes p2wpkh_pkhash = 4;
 * This is a type-conversion wrapper around `getP2wpkhPkhash()`
 * @return {string}
 */
proto.BtcCommand.BtcSignTx.BtcTxOut.prototype.getP2wpkhPkhash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getP2wpkhPkhash()));
};


/**
 * optional bytes p2wpkh_pkhash = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getP2wpkhPkhash()`
 * @return {!Uint8Array}
 */
proto.BtcCommand.BtcSignTx.BtcTxOut.prototype.getP2wpkhPkhash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getP2wpkhPkhash()));
};


/** @param {!(string|Uint8Array)} value */
proto.BtcCommand.BtcSignTx.BtcTxOut.prototype.setP2wpkhPkhash = function(value) {
  jspb.Message.setOneofField(this, 4, proto.BtcCommand.BtcSignTx.BtcTxOut.oneofGroups_[0], value);
};


proto.BtcCommand.BtcSignTx.BtcTxOut.prototype.clearP2wpkhPkhash = function() {
  jspb.Message.setOneofField(this, 4, proto.BtcCommand.BtcSignTx.BtcTxOut.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BtcCommand.BtcSignTx.BtcTxOut.prototype.hasP2wpkhPkhash = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bytes p2wsh_shash = 5;
 * @return {!(string|Uint8Array)}
 */
proto.BtcCommand.BtcSignTx.BtcTxOut.prototype.getP2wshShash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes p2wsh_shash = 5;
 * This is a type-conversion wrapper around `getP2wshShash()`
 * @return {string}
 */
proto.BtcCommand.BtcSignTx.BtcTxOut.prototype.getP2wshShash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getP2wshShash()));
};


/**
 * optional bytes p2wsh_shash = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getP2wshShash()`
 * @return {!Uint8Array}
 */
proto.BtcCommand.BtcSignTx.BtcTxOut.prototype.getP2wshShash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getP2wshShash()));
};


/** @param {!(string|Uint8Array)} value */
proto.BtcCommand.BtcSignTx.BtcTxOut.prototype.setP2wshShash = function(value) {
  jspb.Message.setOneofField(this, 5, proto.BtcCommand.BtcSignTx.BtcTxOut.oneofGroups_[0], value);
};


proto.BtcCommand.BtcSignTx.BtcTxOut.prototype.clearP2wshShash = function() {
  jspb.Message.setOneofField(this, 5, proto.BtcCommand.BtcSignTx.BtcTxOut.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BtcCommand.BtcSignTx.BtcTxOut.prototype.hasP2wshShash = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bytes unknown_script = 6;
 * @return {!(string|Uint8Array)}
 */
proto.BtcCommand.BtcSignTx.BtcTxOut.prototype.getUnknownScript = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes unknown_script = 6;
 * This is a type-conversion wrapper around `getUnknownScript()`
 * @return {string}
 */
proto.BtcCommand.BtcSignTx.BtcTxOut.prototype.getUnknownScript_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUnknownScript()));
};


/**
 * optional bytes unknown_script = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUnknownScript()`
 * @return {!Uint8Array}
 */
proto.BtcCommand.BtcSignTx.BtcTxOut.prototype.getUnknownScript_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUnknownScript()));
};


/** @param {!(string|Uint8Array)} value */
proto.BtcCommand.BtcSignTx.BtcTxOut.prototype.setUnknownScript = function(value) {
  jspb.Message.setOneofField(this, 6, proto.BtcCommand.BtcSignTx.BtcTxOut.oneofGroups_[0], value);
};


proto.BtcCommand.BtcSignTx.BtcTxOut.prototype.clearUnknownScript = function() {
  jspb.Message.setOneofField(this, 6, proto.BtcCommand.BtcSignTx.BtcTxOut.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BtcCommand.BtcSignTx.BtcTxOut.prototype.hasUnknownScript = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BtcCommand.BtcSignTx.BtcChange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BtcCommand.BtcSignTx.BtcChange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BtcCommand.BtcSignTx.BtcChange.displayName = 'proto.BtcCommand.BtcSignTx.BtcChange';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BtcCommand.BtcSignTx.BtcChange.prototype.toObject = function(opt_includeInstance) {
  return proto.BtcCommand.BtcSignTx.BtcChange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BtcCommand.BtcSignTx.BtcChange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BtcCommand.BtcSignTx.BtcChange.toObject = function(includeInstance, msg) {
  var f, obj = {
    account: jspb.Message.getFieldWithDefault(msg, 1, 0),
    addressIndex: jspb.Message.getFieldWithDefault(msg, 2, 0),
    value: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BtcCommand.BtcSignTx.BtcChange}
 */
proto.BtcCommand.BtcSignTx.BtcChange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BtcCommand.BtcSignTx.BtcChange;
  return proto.BtcCommand.BtcSignTx.BtcChange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BtcCommand.BtcSignTx.BtcChange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BtcCommand.BtcSignTx.BtcChange}
 */
proto.BtcCommand.BtcSignTx.BtcChange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAccount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAddressIndex(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BtcCommand.BtcSignTx.BtcChange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BtcCommand.BtcSignTx.BtcChange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BtcCommand.BtcSignTx.BtcChange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BtcCommand.BtcSignTx.BtcChange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccount();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getAddressIndex();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getValue();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional uint32 account = 1;
 * @return {number}
 */
proto.BtcCommand.BtcSignTx.BtcChange.prototype.getAccount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.BtcCommand.BtcSignTx.BtcChange.prototype.setAccount = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 address_index = 2;
 * @return {number}
 */
proto.BtcCommand.BtcSignTx.BtcChange.prototype.getAddressIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.BtcCommand.BtcSignTx.BtcChange.prototype.setAddressIndex = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 value = 3;
 * @return {number}
 */
proto.BtcCommand.BtcSignTx.BtcChange.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.BtcCommand.BtcSignTx.BtcChange.prototype.setValue = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated BtcTxIn inputs = 1;
 * @return {!Array<!proto.BtcCommand.BtcSignTx.BtcTxIn>}
 */
proto.BtcCommand.BtcSignTx.prototype.getInputsList = function() {
  return /** @type{!Array<!proto.BtcCommand.BtcSignTx.BtcTxIn>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.BtcCommand.BtcSignTx.BtcTxIn, 1));
};


/** @param {!Array<!proto.BtcCommand.BtcSignTx.BtcTxIn>} value */
proto.BtcCommand.BtcSignTx.prototype.setInputsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.BtcCommand.BtcSignTx.BtcTxIn=} opt_value
 * @param {number=} opt_index
 * @return {!proto.BtcCommand.BtcSignTx.BtcTxIn}
 */
proto.BtcCommand.BtcSignTx.prototype.addInputs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.BtcCommand.BtcSignTx.BtcTxIn, opt_index);
};


proto.BtcCommand.BtcSignTx.prototype.clearInputsList = function() {
  this.setInputsList([]);
};


/**
 * repeated BtcTxOut outputs = 2;
 * @return {!Array<!proto.BtcCommand.BtcSignTx.BtcTxOut>}
 */
proto.BtcCommand.BtcSignTx.prototype.getOutputsList = function() {
  return /** @type{!Array<!proto.BtcCommand.BtcSignTx.BtcTxOut>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.BtcCommand.BtcSignTx.BtcTxOut, 2));
};


/** @param {!Array<!proto.BtcCommand.BtcSignTx.BtcTxOut>} value */
proto.BtcCommand.BtcSignTx.prototype.setOutputsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.BtcCommand.BtcSignTx.BtcTxOut=} opt_value
 * @param {number=} opt_index
 * @return {!proto.BtcCommand.BtcSignTx.BtcTxOut}
 */
proto.BtcCommand.BtcSignTx.prototype.addOutputs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.BtcCommand.BtcSignTx.BtcTxOut, opt_index);
};


proto.BtcCommand.BtcSignTx.prototype.clearOutputsList = function() {
  this.setOutputsList([]);
};


/**
 * optional BtcChange change = 3;
 * @return {?proto.BtcCommand.BtcSignTx.BtcChange}
 */
proto.BtcCommand.BtcSignTx.prototype.getChange = function() {
  return /** @type{?proto.BtcCommand.BtcSignTx.BtcChange} */ (
    jspb.Message.getWrapperField(this, proto.BtcCommand.BtcSignTx.BtcChange, 3));
};


/** @param {?proto.BtcCommand.BtcSignTx.BtcChange|undefined} value */
proto.BtcCommand.BtcSignTx.prototype.setChange = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.BtcCommand.BtcSignTx.prototype.clearChange = function() {
  this.setChange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BtcCommand.BtcSignTx.prototype.hasChange = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool testnet = 10;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.BtcCommand.prototype.getTestnet = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 10, false));
};


/** @param {boolean} value */
proto.BtcCommand.prototype.setTestnet = function(value) {
  jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional BtcMode mode = 1;
 * @return {!proto.BtcCommand.BtcMode}
 */
proto.BtcCommand.prototype.getMode = function() {
  return /** @type {!proto.BtcCommand.BtcMode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.BtcCommand.BtcMode} value */
proto.BtcCommand.prototype.setMode = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional BtcGetXPub get_xpub = 2;
 * @return {?proto.BtcCommand.BtcGetXPub}
 */
proto.BtcCommand.prototype.getGetXpub = function() {
  return /** @type{?proto.BtcCommand.BtcGetXPub} */ (
    jspb.Message.getWrapperField(this, proto.BtcCommand.BtcGetXPub, 2));
};


/** @param {?proto.BtcCommand.BtcGetXPub|undefined} value */
proto.BtcCommand.prototype.setGetXpub = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.BtcCommand.oneofGroups_[0], value);
};


proto.BtcCommand.prototype.clearGetXpub = function() {
  this.setGetXpub(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BtcCommand.prototype.hasGetXpub = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional BtcShowAddr show_addr = 3;
 * @return {?proto.BtcCommand.BtcShowAddr}
 */
proto.BtcCommand.prototype.getShowAddr = function() {
  return /** @type{?proto.BtcCommand.BtcShowAddr} */ (
    jspb.Message.getWrapperField(this, proto.BtcCommand.BtcShowAddr, 3));
};


/** @param {?proto.BtcCommand.BtcShowAddr|undefined} value */
proto.BtcCommand.prototype.setShowAddr = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.BtcCommand.oneofGroups_[0], value);
};


proto.BtcCommand.prototype.clearShowAddr = function() {
  this.setShowAddr(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BtcCommand.prototype.hasShowAddr = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional BtcSignTx sign_tx = 4;
 * @return {?proto.BtcCommand.BtcSignTx}
 */
proto.BtcCommand.prototype.getSignTx = function() {
  return /** @type{?proto.BtcCommand.BtcSignTx} */ (
    jspb.Message.getWrapperField(this, proto.BtcCommand.BtcSignTx, 4));
};


/** @param {?proto.BtcCommand.BtcSignTx|undefined} value */
proto.BtcCommand.prototype.setSignTx = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.BtcCommand.oneofGroups_[0], value);
};


proto.BtcCommand.prototype.clearSignTx = function() {
  this.setSignTx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BtcCommand.prototype.hasSignTx = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BtcResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.BtcResponse.oneofGroups_);
};
goog.inherits(proto.BtcResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BtcResponse.displayName = 'proto.BtcResponse';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.BtcResponse.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.BtcResponse.MsgCase = {
  MSG_NOT_SET: 0,
  ERROR: 1,
  XPUB: 2,
  SIGNED_TX: 3
};

/**
 * @return {proto.BtcResponse.MsgCase}
 */
proto.BtcResponse.prototype.getMsgCase = function() {
  return /** @type {proto.BtcResponse.MsgCase} */(jspb.Message.computeOneofCase(this, proto.BtcResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BtcResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.BtcResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BtcResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BtcResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: jspb.Message.getFieldWithDefault(msg, 1, 0),
    xpub: (f = msg.getXpub()) && proto.BtcResponse.BtcXPub.toObject(includeInstance, f),
    signedTx: (f = msg.getSignedTx()) && proto.BtcResponse.BtcSignedTx.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BtcResponse}
 */
proto.BtcResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BtcResponse;
  return proto.BtcResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BtcResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BtcResponse}
 */
proto.BtcResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Error} */ (reader.readEnum());
      msg.setError(value);
      break;
    case 2:
      var value = new proto.BtcResponse.BtcXPub;
      reader.readMessage(value,proto.BtcResponse.BtcXPub.deserializeBinaryFromReader);
      msg.setXpub(value);
      break;
    case 3:
      var value = new proto.BtcResponse.BtcSignedTx;
      reader.readMessage(value,proto.BtcResponse.BtcSignedTx.deserializeBinaryFromReader);
      msg.setSignedTx(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BtcResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BtcResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BtcResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BtcResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.Error} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getXpub();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.BtcResponse.BtcXPub.serializeBinaryToWriter
    );
  }
  f = message.getSignedTx();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.BtcResponse.BtcSignedTx.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BtcResponse.BtcXPub = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BtcResponse.BtcXPub, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BtcResponse.BtcXPub.displayName = 'proto.BtcResponse.BtcXPub';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BtcResponse.BtcXPub.prototype.toObject = function(opt_includeInstance) {
  return proto.BtcResponse.BtcXPub.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BtcResponse.BtcXPub} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BtcResponse.BtcXPub.toObject = function(includeInstance, msg) {
  var f, obj = {
    xpub: msg.getXpub_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BtcResponse.BtcXPub}
 */
proto.BtcResponse.BtcXPub.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BtcResponse.BtcXPub;
  return proto.BtcResponse.BtcXPub.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BtcResponse.BtcXPub} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BtcResponse.BtcXPub}
 */
proto.BtcResponse.BtcXPub.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setXpub(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BtcResponse.BtcXPub.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BtcResponse.BtcXPub.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BtcResponse.BtcXPub} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BtcResponse.BtcXPub.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getXpub_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes xpub = 1;
 * @return {!(string|Uint8Array)}
 */
proto.BtcResponse.BtcXPub.prototype.getXpub = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes xpub = 1;
 * This is a type-conversion wrapper around `getXpub()`
 * @return {string}
 */
proto.BtcResponse.BtcXPub.prototype.getXpub_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getXpub()));
};


/**
 * optional bytes xpub = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getXpub()`
 * @return {!Uint8Array}
 */
proto.BtcResponse.BtcXPub.prototype.getXpub_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getXpub()));
};


/** @param {!(string|Uint8Array)} value */
proto.BtcResponse.BtcXPub.prototype.setXpub = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BtcResponse.BtcSignedTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BtcResponse.BtcSignedTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BtcResponse.BtcSignedTx.displayName = 'proto.BtcResponse.BtcSignedTx';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BtcResponse.BtcSignedTx.prototype.toObject = function(opt_includeInstance) {
  return proto.BtcResponse.BtcSignedTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BtcResponse.BtcSignedTx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BtcResponse.BtcSignedTx.toObject = function(includeInstance, msg) {
  var f, obj = {
    rawtx: msg.getRawtx_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BtcResponse.BtcSignedTx}
 */
proto.BtcResponse.BtcSignedTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BtcResponse.BtcSignedTx;
  return proto.BtcResponse.BtcSignedTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BtcResponse.BtcSignedTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BtcResponse.BtcSignedTx}
 */
proto.BtcResponse.BtcSignedTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRawtx(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BtcResponse.BtcSignedTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BtcResponse.BtcSignedTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BtcResponse.BtcSignedTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BtcResponse.BtcSignedTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRawtx_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes rawtx = 1;
 * @return {!(string|Uint8Array)}
 */
proto.BtcResponse.BtcSignedTx.prototype.getRawtx = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes rawtx = 1;
 * This is a type-conversion wrapper around `getRawtx()`
 * @return {string}
 */
proto.BtcResponse.BtcSignedTx.prototype.getRawtx_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRawtx()));
};


/**
 * optional bytes rawtx = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRawtx()`
 * @return {!Uint8Array}
 */
proto.BtcResponse.BtcSignedTx.prototype.getRawtx_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRawtx()));
};


/** @param {!(string|Uint8Array)} value */
proto.BtcResponse.BtcSignedTx.prototype.setRawtx = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional Error error = 1;
 * @return {!proto.Error}
 */
proto.BtcResponse.prototype.getError = function() {
  return /** @type {!proto.Error} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Error} value */
proto.BtcResponse.prototype.setError = function(value) {
  jspb.Message.setOneofField(this, 1, proto.BtcResponse.oneofGroups_[0], value);
};


proto.BtcResponse.prototype.clearError = function() {
  jspb.Message.setOneofField(this, 1, proto.BtcResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BtcResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional BtcXPub xpub = 2;
 * @return {?proto.BtcResponse.BtcXPub}
 */
proto.BtcResponse.prototype.getXpub = function() {
  return /** @type{?proto.BtcResponse.BtcXPub} */ (
    jspb.Message.getWrapperField(this, proto.BtcResponse.BtcXPub, 2));
};


/** @param {?proto.BtcResponse.BtcXPub|undefined} value */
proto.BtcResponse.prototype.setXpub = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.BtcResponse.oneofGroups_[0], value);
};


proto.BtcResponse.prototype.clearXpub = function() {
  this.setXpub(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BtcResponse.prototype.hasXpub = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional BtcSignedTx signed_tx = 3;
 * @return {?proto.BtcResponse.BtcSignedTx}
 */
proto.BtcResponse.prototype.getSignedTx = function() {
  return /** @type{?proto.BtcResponse.BtcSignedTx} */ (
    jspb.Message.getWrapperField(this, proto.BtcResponse.BtcSignedTx, 3));
};


/** @param {?proto.BtcResponse.BtcSignedTx|undefined} value */
proto.BtcResponse.prototype.setSignedTx = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.BtcResponse.oneofGroups_[0], value);
};


proto.BtcResponse.prototype.clearSignedTx = function() {
  this.setSignedTx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BtcResponse.prototype.hasSignedTx = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto);
