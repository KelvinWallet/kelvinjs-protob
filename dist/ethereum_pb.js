/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_pb = require('./common_pb.js');
goog.exportSymbol('proto.EthCommand', null, global);
goog.exportSymbol('proto.EthCommand.EthGetXPub', null, global);
goog.exportSymbol('proto.EthCommand.EthShowAddr', null, global);
goog.exportSymbol('proto.EthCommand.EthSign32ByteHash', null, global);
goog.exportSymbol('proto.EthCommand.EthSignBasicTx', null, global);
goog.exportSymbol('proto.EthCommand.EthSignERC20Tx', null, global);
goog.exportSymbol('proto.EthCommand.EthSignGnosisConfirm', null, global);
goog.exportSymbol('proto.EthCommand.EthSignGnosisSubmitERC20Transfer', null, global);
goog.exportSymbol('proto.EthCommand.EthSignGnosisSubmitEtherTransfer', null, global);
goog.exportSymbol('proto.EthResponse', null, global);
goog.exportSymbol('proto.EthResponse.EthSig', null, global);
goog.exportSymbol('proto.EthResponse.EthXPub', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EthCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.EthCommand.oneofGroups_);
};
goog.inherits(proto.EthCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.EthCommand.displayName = 'proto.EthCommand';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.EthCommand.oneofGroups_ = [[1,2,3,4,5,8,6,7]];

/**
 * @enum {number}
 */
proto.EthCommand.MsgCase = {
  MSG_NOT_SET: 0,
  GET_XPUB: 1,
  SHOW_ADDR: 2,
  SIGN_BASIC_TX: 3,
  SIGN_ERC20_TX: 4,
  SIGN_32BYTE_HASH: 5,
  SIGN_GNOSIS_SUBMIT_ETHER_TRANSFER: 8,
  SIGN_GNOSIS_SUBMIT_ERC20_TRANSFER: 6,
  SIGN_GNOSIS_CONFIRM: 7
};

/**
 * @return {proto.EthCommand.MsgCase}
 */
proto.EthCommand.prototype.getMsgCase = function() {
  return /** @type {proto.EthCommand.MsgCase} */(jspb.Message.computeOneofCase(this, proto.EthCommand.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EthCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.EthCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EthCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EthCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    getXpub: (f = msg.getGetXpub()) && proto.EthCommand.EthGetXPub.toObject(includeInstance, f),
    showAddr: (f = msg.getShowAddr()) && proto.EthCommand.EthShowAddr.toObject(includeInstance, f),
    signBasicTx: (f = msg.getSignBasicTx()) && proto.EthCommand.EthSignBasicTx.toObject(includeInstance, f),
    signErc20Tx: (f = msg.getSignErc20Tx()) && proto.EthCommand.EthSignERC20Tx.toObject(includeInstance, f),
    sign32byteHash: (f = msg.getSign32byteHash()) && proto.EthCommand.EthSign32ByteHash.toObject(includeInstance, f),
    signGnosisSubmitEtherTransfer: (f = msg.getSignGnosisSubmitEtherTransfer()) && proto.EthCommand.EthSignGnosisSubmitEtherTransfer.toObject(includeInstance, f),
    signGnosisSubmitErc20Transfer: (f = msg.getSignGnosisSubmitErc20Transfer()) && proto.EthCommand.EthSignGnosisSubmitERC20Transfer.toObject(includeInstance, f),
    signGnosisConfirm: (f = msg.getSignGnosisConfirm()) && proto.EthCommand.EthSignGnosisConfirm.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EthCommand}
 */
proto.EthCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EthCommand;
  return proto.EthCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EthCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EthCommand}
 */
proto.EthCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.EthCommand.EthGetXPub;
      reader.readMessage(value,proto.EthCommand.EthGetXPub.deserializeBinaryFromReader);
      msg.setGetXpub(value);
      break;
    case 2:
      var value = new proto.EthCommand.EthShowAddr;
      reader.readMessage(value,proto.EthCommand.EthShowAddr.deserializeBinaryFromReader);
      msg.setShowAddr(value);
      break;
    case 3:
      var value = new proto.EthCommand.EthSignBasicTx;
      reader.readMessage(value,proto.EthCommand.EthSignBasicTx.deserializeBinaryFromReader);
      msg.setSignBasicTx(value);
      break;
    case 4:
      var value = new proto.EthCommand.EthSignERC20Tx;
      reader.readMessage(value,proto.EthCommand.EthSignERC20Tx.deserializeBinaryFromReader);
      msg.setSignErc20Tx(value);
      break;
    case 5:
      var value = new proto.EthCommand.EthSign32ByteHash;
      reader.readMessage(value,proto.EthCommand.EthSign32ByteHash.deserializeBinaryFromReader);
      msg.setSign32byteHash(value);
      break;
    case 8:
      var value = new proto.EthCommand.EthSignGnosisSubmitEtherTransfer;
      reader.readMessage(value,proto.EthCommand.EthSignGnosisSubmitEtherTransfer.deserializeBinaryFromReader);
      msg.setSignGnosisSubmitEtherTransfer(value);
      break;
    case 6:
      var value = new proto.EthCommand.EthSignGnosisSubmitERC20Transfer;
      reader.readMessage(value,proto.EthCommand.EthSignGnosisSubmitERC20Transfer.deserializeBinaryFromReader);
      msg.setSignGnosisSubmitErc20Transfer(value);
      break;
    case 7:
      var value = new proto.EthCommand.EthSignGnosisConfirm;
      reader.readMessage(value,proto.EthCommand.EthSignGnosisConfirm.deserializeBinaryFromReader);
      msg.setSignGnosisConfirm(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EthCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EthCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EthCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EthCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGetXpub();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.EthCommand.EthGetXPub.serializeBinaryToWriter
    );
  }
  f = message.getShowAddr();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.EthCommand.EthShowAddr.serializeBinaryToWriter
    );
  }
  f = message.getSignBasicTx();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.EthCommand.EthSignBasicTx.serializeBinaryToWriter
    );
  }
  f = message.getSignErc20Tx();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.EthCommand.EthSignERC20Tx.serializeBinaryToWriter
    );
  }
  f = message.getSign32byteHash();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.EthCommand.EthSign32ByteHash.serializeBinaryToWriter
    );
  }
  f = message.getSignGnosisSubmitEtherTransfer();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.EthCommand.EthSignGnosisSubmitEtherTransfer.serializeBinaryToWriter
    );
  }
  f = message.getSignGnosisSubmitErc20Transfer();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.EthCommand.EthSignGnosisSubmitERC20Transfer.serializeBinaryToWriter
    );
  }
  f = message.getSignGnosisConfirm();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.EthCommand.EthSignGnosisConfirm.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EthCommand.EthGetXPub = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.EthCommand.EthGetXPub.repeatedFields_, null);
};
goog.inherits(proto.EthCommand.EthGetXPub, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.EthCommand.EthGetXPub.displayName = 'proto.EthCommand.EthGetXPub';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.EthCommand.EthGetXPub.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EthCommand.EthGetXPub.prototype.toObject = function(opt_includeInstance) {
  return proto.EthCommand.EthGetXPub.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EthCommand.EthGetXPub} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EthCommand.EthGetXPub.toObject = function(includeInstance, msg) {
  var f, obj = {
    pathList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EthCommand.EthGetXPub}
 */
proto.EthCommand.EthGetXPub.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EthCommand.EthGetXPub;
  return proto.EthCommand.EthGetXPub.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EthCommand.EthGetXPub} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EthCommand.EthGetXPub}
 */
proto.EthCommand.EthGetXPub.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setPathList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EthCommand.EthGetXPub.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EthCommand.EthGetXPub.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EthCommand.EthGetXPub} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EthCommand.EthGetXPub.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPathList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
};


/**
 * repeated uint32 path = 1;
 * @return {!Array<number>}
 */
proto.EthCommand.EthGetXPub.prototype.getPathList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<number>} value */
proto.EthCommand.EthGetXPub.prototype.setPathList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.EthCommand.EthGetXPub.prototype.addPath = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.EthCommand.EthGetXPub.prototype.clearPathList = function() {
  this.setPathList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EthCommand.EthShowAddr = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.EthCommand.EthShowAddr.repeatedFields_, null);
};
goog.inherits(proto.EthCommand.EthShowAddr, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.EthCommand.EthShowAddr.displayName = 'proto.EthCommand.EthShowAddr';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.EthCommand.EthShowAddr.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EthCommand.EthShowAddr.prototype.toObject = function(opt_includeInstance) {
  return proto.EthCommand.EthShowAddr.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EthCommand.EthShowAddr} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EthCommand.EthShowAddr.toObject = function(includeInstance, msg) {
  var f, obj = {
    pathList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EthCommand.EthShowAddr}
 */
proto.EthCommand.EthShowAddr.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EthCommand.EthShowAddr;
  return proto.EthCommand.EthShowAddr.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EthCommand.EthShowAddr} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EthCommand.EthShowAddr}
 */
proto.EthCommand.EthShowAddr.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setPathList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EthCommand.EthShowAddr.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EthCommand.EthShowAddr.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EthCommand.EthShowAddr} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EthCommand.EthShowAddr.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPathList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
};


/**
 * repeated uint32 path = 1;
 * @return {!Array<number>}
 */
proto.EthCommand.EthShowAddr.prototype.getPathList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<number>} value */
proto.EthCommand.EthShowAddr.prototype.setPathList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.EthCommand.EthShowAddr.prototype.addPath = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.EthCommand.EthShowAddr.prototype.clearPathList = function() {
  this.setPathList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EthCommand.EthSignBasicTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.EthCommand.EthSignBasicTx.repeatedFields_, null);
};
goog.inherits(proto.EthCommand.EthSignBasicTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.EthCommand.EthSignBasicTx.displayName = 'proto.EthCommand.EthSignBasicTx';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.EthCommand.EthSignBasicTx.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EthCommand.EthSignBasicTx.prototype.toObject = function(opt_includeInstance) {
  return proto.EthCommand.EthSignBasicTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EthCommand.EthSignBasicTx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EthCommand.EthSignBasicTx.toObject = function(includeInstance, msg) {
  var f, obj = {
    signChainId: jspb.Message.getFieldWithDefault(msg, 1, false),
    chainId: msg.getChainId_asB64(),
    pathList: jspb.Message.getRepeatedField(msg, 3),
    nonce: msg.getNonce_asB64(),
    gasPrice: msg.getGasPrice_asB64(),
    gasLimit: msg.getGasLimit_asB64(),
    dstAddr: msg.getDstAddr_asB64(),
    value: msg.getValue_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EthCommand.EthSignBasicTx}
 */
proto.EthCommand.EthSignBasicTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EthCommand.EthSignBasicTx;
  return proto.EthCommand.EthSignBasicTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EthCommand.EthSignBasicTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EthCommand.EthSignBasicTx}
 */
proto.EthCommand.EthSignBasicTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSignChainId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChainId(value);
      break;
    case 3:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setPathList(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNonce(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGasPrice(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGasLimit(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDstAddr(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EthCommand.EthSignBasicTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EthCommand.EthSignBasicTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EthCommand.EthSignBasicTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EthCommand.EthSignBasicTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignChainId();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getChainId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getPathList();
  if (f.length > 0) {
    writer.writePackedUint32(
      3,
      f
    );
  }
  f = message.getNonce_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getGasPrice_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getGasLimit_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getDstAddr_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
};


/**
 * optional bool sign_chain_id = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.EthCommand.EthSignBasicTx.prototype.getSignChainId = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.EthCommand.EthSignBasicTx.prototype.setSignChainId = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bytes chain_id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.EthCommand.EthSignBasicTx.prototype.getChainId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes chain_id = 2;
 * This is a type-conversion wrapper around `getChainId()`
 * @return {string}
 */
proto.EthCommand.EthSignBasicTx.prototype.getChainId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChainId()));
};


/**
 * optional bytes chain_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChainId()`
 * @return {!Uint8Array}
 */
proto.EthCommand.EthSignBasicTx.prototype.getChainId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChainId()));
};


/** @param {!(string|Uint8Array)} value */
proto.EthCommand.EthSignBasicTx.prototype.setChainId = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * repeated uint32 path = 3;
 * @return {!Array<number>}
 */
proto.EthCommand.EthSignBasicTx.prototype.getPathList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<number>} value */
proto.EthCommand.EthSignBasicTx.prototype.setPathList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.EthCommand.EthSignBasicTx.prototype.addPath = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.EthCommand.EthSignBasicTx.prototype.clearPathList = function() {
  this.setPathList([]);
};


/**
 * optional bytes nonce = 4;
 * @return {!(string|Uint8Array)}
 */
proto.EthCommand.EthSignBasicTx.prototype.getNonce = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes nonce = 4;
 * This is a type-conversion wrapper around `getNonce()`
 * @return {string}
 */
proto.EthCommand.EthSignBasicTx.prototype.getNonce_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNonce()));
};


/**
 * optional bytes nonce = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNonce()`
 * @return {!Uint8Array}
 */
proto.EthCommand.EthSignBasicTx.prototype.getNonce_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNonce()));
};


/** @param {!(string|Uint8Array)} value */
proto.EthCommand.EthSignBasicTx.prototype.setNonce = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes gas_price = 5;
 * @return {!(string|Uint8Array)}
 */
proto.EthCommand.EthSignBasicTx.prototype.getGasPrice = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes gas_price = 5;
 * This is a type-conversion wrapper around `getGasPrice()`
 * @return {string}
 */
proto.EthCommand.EthSignBasicTx.prototype.getGasPrice_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGasPrice()));
};


/**
 * optional bytes gas_price = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGasPrice()`
 * @return {!Uint8Array}
 */
proto.EthCommand.EthSignBasicTx.prototype.getGasPrice_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGasPrice()));
};


/** @param {!(string|Uint8Array)} value */
proto.EthCommand.EthSignBasicTx.prototype.setGasPrice = function(value) {
  jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes gas_limit = 6;
 * @return {!(string|Uint8Array)}
 */
proto.EthCommand.EthSignBasicTx.prototype.getGasLimit = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes gas_limit = 6;
 * This is a type-conversion wrapper around `getGasLimit()`
 * @return {string}
 */
proto.EthCommand.EthSignBasicTx.prototype.getGasLimit_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGasLimit()));
};


/**
 * optional bytes gas_limit = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGasLimit()`
 * @return {!Uint8Array}
 */
proto.EthCommand.EthSignBasicTx.prototype.getGasLimit_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGasLimit()));
};


/** @param {!(string|Uint8Array)} value */
proto.EthCommand.EthSignBasicTx.prototype.setGasLimit = function(value) {
  jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes dst_addr = 7;
 * @return {!(string|Uint8Array)}
 */
proto.EthCommand.EthSignBasicTx.prototype.getDstAddr = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes dst_addr = 7;
 * This is a type-conversion wrapper around `getDstAddr()`
 * @return {string}
 */
proto.EthCommand.EthSignBasicTx.prototype.getDstAddr_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDstAddr()));
};


/**
 * optional bytes dst_addr = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDstAddr()`
 * @return {!Uint8Array}
 */
proto.EthCommand.EthSignBasicTx.prototype.getDstAddr_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDstAddr()));
};


/** @param {!(string|Uint8Array)} value */
proto.EthCommand.EthSignBasicTx.prototype.setDstAddr = function(value) {
  jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional bytes value = 8;
 * @return {!(string|Uint8Array)}
 */
proto.EthCommand.EthSignBasicTx.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes value = 8;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.EthCommand.EthSignBasicTx.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.EthCommand.EthSignBasicTx.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/** @param {!(string|Uint8Array)} value */
proto.EthCommand.EthSignBasicTx.prototype.setValue = function(value) {
  jspb.Message.setProto3BytesField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EthCommand.EthSignERC20Tx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.EthCommand.EthSignERC20Tx.repeatedFields_, null);
};
goog.inherits(proto.EthCommand.EthSignERC20Tx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.EthCommand.EthSignERC20Tx.displayName = 'proto.EthCommand.EthSignERC20Tx';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.EthCommand.EthSignERC20Tx.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EthCommand.EthSignERC20Tx.prototype.toObject = function(opt_includeInstance) {
  return proto.EthCommand.EthSignERC20Tx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EthCommand.EthSignERC20Tx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EthCommand.EthSignERC20Tx.toObject = function(includeInstance, msg) {
  var f, obj = {
    signChainId: jspb.Message.getFieldWithDefault(msg, 1, false),
    chainId: msg.getChainId_asB64(),
    pathList: jspb.Message.getRepeatedField(msg, 3),
    nonce: msg.getNonce_asB64(),
    gasPrice: msg.getGasPrice_asB64(),
    gasLimit: msg.getGasLimit_asB64(),
    tokenAddr: msg.getTokenAddr_asB64(),
    recipientAddr: msg.getRecipientAddr_asB64(),
    amount: msg.getAmount_asB64(),
    tokenShortSymbol: msg.getTokenShortSymbol_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EthCommand.EthSignERC20Tx}
 */
proto.EthCommand.EthSignERC20Tx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EthCommand.EthSignERC20Tx;
  return proto.EthCommand.EthSignERC20Tx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EthCommand.EthSignERC20Tx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EthCommand.EthSignERC20Tx}
 */
proto.EthCommand.EthSignERC20Tx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSignChainId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChainId(value);
      break;
    case 3:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setPathList(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNonce(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGasPrice(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGasLimit(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTokenAddr(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRecipientAddr(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAmount(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTokenShortSymbol(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EthCommand.EthSignERC20Tx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EthCommand.EthSignERC20Tx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EthCommand.EthSignERC20Tx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EthCommand.EthSignERC20Tx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignChainId();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getChainId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getPathList();
  if (f.length > 0) {
    writer.writePackedUint32(
      3,
      f
    );
  }
  f = message.getNonce_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getGasPrice_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getGasLimit_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getTokenAddr_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getRecipientAddr_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = message.getAmount_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = message.getTokenShortSymbol_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
};


/**
 * optional bool sign_chain_id = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.EthCommand.EthSignERC20Tx.prototype.getSignChainId = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.EthCommand.EthSignERC20Tx.prototype.setSignChainId = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bytes chain_id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.EthCommand.EthSignERC20Tx.prototype.getChainId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes chain_id = 2;
 * This is a type-conversion wrapper around `getChainId()`
 * @return {string}
 */
proto.EthCommand.EthSignERC20Tx.prototype.getChainId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChainId()));
};


/**
 * optional bytes chain_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChainId()`
 * @return {!Uint8Array}
 */
proto.EthCommand.EthSignERC20Tx.prototype.getChainId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChainId()));
};


/** @param {!(string|Uint8Array)} value */
proto.EthCommand.EthSignERC20Tx.prototype.setChainId = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * repeated uint32 path = 3;
 * @return {!Array<number>}
 */
proto.EthCommand.EthSignERC20Tx.prototype.getPathList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<number>} value */
proto.EthCommand.EthSignERC20Tx.prototype.setPathList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.EthCommand.EthSignERC20Tx.prototype.addPath = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.EthCommand.EthSignERC20Tx.prototype.clearPathList = function() {
  this.setPathList([]);
};


/**
 * optional bytes nonce = 4;
 * @return {!(string|Uint8Array)}
 */
proto.EthCommand.EthSignERC20Tx.prototype.getNonce = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes nonce = 4;
 * This is a type-conversion wrapper around `getNonce()`
 * @return {string}
 */
proto.EthCommand.EthSignERC20Tx.prototype.getNonce_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNonce()));
};


/**
 * optional bytes nonce = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNonce()`
 * @return {!Uint8Array}
 */
proto.EthCommand.EthSignERC20Tx.prototype.getNonce_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNonce()));
};


/** @param {!(string|Uint8Array)} value */
proto.EthCommand.EthSignERC20Tx.prototype.setNonce = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes gas_price = 5;
 * @return {!(string|Uint8Array)}
 */
proto.EthCommand.EthSignERC20Tx.prototype.getGasPrice = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes gas_price = 5;
 * This is a type-conversion wrapper around `getGasPrice()`
 * @return {string}
 */
proto.EthCommand.EthSignERC20Tx.prototype.getGasPrice_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGasPrice()));
};


/**
 * optional bytes gas_price = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGasPrice()`
 * @return {!Uint8Array}
 */
proto.EthCommand.EthSignERC20Tx.prototype.getGasPrice_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGasPrice()));
};


/** @param {!(string|Uint8Array)} value */
proto.EthCommand.EthSignERC20Tx.prototype.setGasPrice = function(value) {
  jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes gas_limit = 6;
 * @return {!(string|Uint8Array)}
 */
proto.EthCommand.EthSignERC20Tx.prototype.getGasLimit = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes gas_limit = 6;
 * This is a type-conversion wrapper around `getGasLimit()`
 * @return {string}
 */
proto.EthCommand.EthSignERC20Tx.prototype.getGasLimit_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGasLimit()));
};


/**
 * optional bytes gas_limit = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGasLimit()`
 * @return {!Uint8Array}
 */
proto.EthCommand.EthSignERC20Tx.prototype.getGasLimit_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGasLimit()));
};


/** @param {!(string|Uint8Array)} value */
proto.EthCommand.EthSignERC20Tx.prototype.setGasLimit = function(value) {
  jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes token_addr = 7;
 * @return {!(string|Uint8Array)}
 */
proto.EthCommand.EthSignERC20Tx.prototype.getTokenAddr = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes token_addr = 7;
 * This is a type-conversion wrapper around `getTokenAddr()`
 * @return {string}
 */
proto.EthCommand.EthSignERC20Tx.prototype.getTokenAddr_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTokenAddr()));
};


/**
 * optional bytes token_addr = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTokenAddr()`
 * @return {!Uint8Array}
 */
proto.EthCommand.EthSignERC20Tx.prototype.getTokenAddr_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTokenAddr()));
};


/** @param {!(string|Uint8Array)} value */
proto.EthCommand.EthSignERC20Tx.prototype.setTokenAddr = function(value) {
  jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional bytes recipient_addr = 8;
 * @return {!(string|Uint8Array)}
 */
proto.EthCommand.EthSignERC20Tx.prototype.getRecipientAddr = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes recipient_addr = 8;
 * This is a type-conversion wrapper around `getRecipientAddr()`
 * @return {string}
 */
proto.EthCommand.EthSignERC20Tx.prototype.getRecipientAddr_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRecipientAddr()));
};


/**
 * optional bytes recipient_addr = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRecipientAddr()`
 * @return {!Uint8Array}
 */
proto.EthCommand.EthSignERC20Tx.prototype.getRecipientAddr_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRecipientAddr()));
};


/** @param {!(string|Uint8Array)} value */
proto.EthCommand.EthSignERC20Tx.prototype.setRecipientAddr = function(value) {
  jspb.Message.setProto3BytesField(this, 8, value);
};


/**
 * optional bytes amount = 9;
 * @return {!(string|Uint8Array)}
 */
proto.EthCommand.EthSignERC20Tx.prototype.getAmount = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes amount = 9;
 * This is a type-conversion wrapper around `getAmount()`
 * @return {string}
 */
proto.EthCommand.EthSignERC20Tx.prototype.getAmount_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAmount()));
};


/**
 * optional bytes amount = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAmount()`
 * @return {!Uint8Array}
 */
proto.EthCommand.EthSignERC20Tx.prototype.getAmount_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAmount()));
};


/** @param {!(string|Uint8Array)} value */
proto.EthCommand.EthSignERC20Tx.prototype.setAmount = function(value) {
  jspb.Message.setProto3BytesField(this, 9, value);
};


/**
 * optional bytes token_short_symbol = 10;
 * @return {!(string|Uint8Array)}
 */
proto.EthCommand.EthSignERC20Tx.prototype.getTokenShortSymbol = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes token_short_symbol = 10;
 * This is a type-conversion wrapper around `getTokenShortSymbol()`
 * @return {string}
 */
proto.EthCommand.EthSignERC20Tx.prototype.getTokenShortSymbol_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTokenShortSymbol()));
};


/**
 * optional bytes token_short_symbol = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTokenShortSymbol()`
 * @return {!Uint8Array}
 */
proto.EthCommand.EthSignERC20Tx.prototype.getTokenShortSymbol_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTokenShortSymbol()));
};


/** @param {!(string|Uint8Array)} value */
proto.EthCommand.EthSignERC20Tx.prototype.setTokenShortSymbol = function(value) {
  jspb.Message.setProto3BytesField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EthCommand.EthSign32ByteHash = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.EthCommand.EthSign32ByteHash.repeatedFields_, null);
};
goog.inherits(proto.EthCommand.EthSign32ByteHash, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.EthCommand.EthSign32ByteHash.displayName = 'proto.EthCommand.EthSign32ByteHash';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.EthCommand.EthSign32ByteHash.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EthCommand.EthSign32ByteHash.prototype.toObject = function(opt_includeInstance) {
  return proto.EthCommand.EthSign32ByteHash.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EthCommand.EthSign32ByteHash} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EthCommand.EthSign32ByteHash.toObject = function(includeInstance, msg) {
  var f, obj = {
    pathList: jspb.Message.getRepeatedField(msg, 1),
    hash: msg.getHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EthCommand.EthSign32ByteHash}
 */
proto.EthCommand.EthSign32ByteHash.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EthCommand.EthSign32ByteHash;
  return proto.EthCommand.EthSign32ByteHash.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EthCommand.EthSign32ByteHash} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EthCommand.EthSign32ByteHash}
 */
proto.EthCommand.EthSign32ByteHash.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setPathList(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EthCommand.EthSign32ByteHash.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EthCommand.EthSign32ByteHash.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EthCommand.EthSign32ByteHash} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EthCommand.EthSign32ByteHash.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPathList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * repeated uint32 path = 1;
 * @return {!Array<number>}
 */
proto.EthCommand.EthSign32ByteHash.prototype.getPathList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<number>} value */
proto.EthCommand.EthSign32ByteHash.prototype.setPathList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.EthCommand.EthSign32ByteHash.prototype.addPath = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.EthCommand.EthSign32ByteHash.prototype.clearPathList = function() {
  this.setPathList([]);
};


/**
 * optional bytes hash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.EthCommand.EthSign32ByteHash.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes hash = 2;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.EthCommand.EthSign32ByteHash.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.EthCommand.EthSign32ByteHash.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.EthCommand.EthSign32ByteHash.prototype.setHash = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EthCommand.EthSignGnosisSubmitEtherTransfer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.EthCommand.EthSignGnosisSubmitEtherTransfer.repeatedFields_, null);
};
goog.inherits(proto.EthCommand.EthSignGnosisSubmitEtherTransfer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.EthCommand.EthSignGnosisSubmitEtherTransfer.displayName = 'proto.EthCommand.EthSignGnosisSubmitEtherTransfer';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.EthCommand.EthSignGnosisSubmitEtherTransfer.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EthCommand.EthSignGnosisSubmitEtherTransfer.prototype.toObject = function(opt_includeInstance) {
  return proto.EthCommand.EthSignGnosisSubmitEtherTransfer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EthCommand.EthSignGnosisSubmitEtherTransfer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EthCommand.EthSignGnosisSubmitEtherTransfer.toObject = function(includeInstance, msg) {
  var f, obj = {
    signChainId: jspb.Message.getFieldWithDefault(msg, 1, false),
    chainId: msg.getChainId_asB64(),
    pathList: jspb.Message.getRepeatedField(msg, 3),
    nonce: msg.getNonce_asB64(),
    gasPrice: msg.getGasPrice_asB64(),
    gasLimit: msg.getGasLimit_asB64(),
    gmswAddress: msg.getGmswAddress_asB64(),
    etherRecipientAddress: msg.getEtherRecipientAddress_asB64(),
    etherTransferAmount: msg.getEtherTransferAmount_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EthCommand.EthSignGnosisSubmitEtherTransfer}
 */
proto.EthCommand.EthSignGnosisSubmitEtherTransfer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EthCommand.EthSignGnosisSubmitEtherTransfer;
  return proto.EthCommand.EthSignGnosisSubmitEtherTransfer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EthCommand.EthSignGnosisSubmitEtherTransfer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EthCommand.EthSignGnosisSubmitEtherTransfer}
 */
proto.EthCommand.EthSignGnosisSubmitEtherTransfer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSignChainId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChainId(value);
      break;
    case 3:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setPathList(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNonce(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGasPrice(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGasLimit(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGmswAddress(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEtherRecipientAddress(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEtherTransferAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EthCommand.EthSignGnosisSubmitEtherTransfer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EthCommand.EthSignGnosisSubmitEtherTransfer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EthCommand.EthSignGnosisSubmitEtherTransfer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EthCommand.EthSignGnosisSubmitEtherTransfer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignChainId();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getChainId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getPathList();
  if (f.length > 0) {
    writer.writePackedUint32(
      3,
      f
    );
  }
  f = message.getNonce_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getGasPrice_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getGasLimit_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getGmswAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getEtherRecipientAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = message.getEtherTransferAmount_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
};


/**
 * optional bool sign_chain_id = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.EthCommand.EthSignGnosisSubmitEtherTransfer.prototype.getSignChainId = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.EthCommand.EthSignGnosisSubmitEtherTransfer.prototype.setSignChainId = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bytes chain_id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.EthCommand.EthSignGnosisSubmitEtherTransfer.prototype.getChainId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes chain_id = 2;
 * This is a type-conversion wrapper around `getChainId()`
 * @return {string}
 */
proto.EthCommand.EthSignGnosisSubmitEtherTransfer.prototype.getChainId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChainId()));
};


/**
 * optional bytes chain_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChainId()`
 * @return {!Uint8Array}
 */
proto.EthCommand.EthSignGnosisSubmitEtherTransfer.prototype.getChainId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChainId()));
};


/** @param {!(string|Uint8Array)} value */
proto.EthCommand.EthSignGnosisSubmitEtherTransfer.prototype.setChainId = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * repeated uint32 path = 3;
 * @return {!Array<number>}
 */
proto.EthCommand.EthSignGnosisSubmitEtherTransfer.prototype.getPathList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<number>} value */
proto.EthCommand.EthSignGnosisSubmitEtherTransfer.prototype.setPathList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.EthCommand.EthSignGnosisSubmitEtherTransfer.prototype.addPath = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.EthCommand.EthSignGnosisSubmitEtherTransfer.prototype.clearPathList = function() {
  this.setPathList([]);
};


/**
 * optional bytes nonce = 4;
 * @return {!(string|Uint8Array)}
 */
proto.EthCommand.EthSignGnosisSubmitEtherTransfer.prototype.getNonce = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes nonce = 4;
 * This is a type-conversion wrapper around `getNonce()`
 * @return {string}
 */
proto.EthCommand.EthSignGnosisSubmitEtherTransfer.prototype.getNonce_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNonce()));
};


/**
 * optional bytes nonce = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNonce()`
 * @return {!Uint8Array}
 */
proto.EthCommand.EthSignGnosisSubmitEtherTransfer.prototype.getNonce_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNonce()));
};


/** @param {!(string|Uint8Array)} value */
proto.EthCommand.EthSignGnosisSubmitEtherTransfer.prototype.setNonce = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes gas_price = 5;
 * @return {!(string|Uint8Array)}
 */
proto.EthCommand.EthSignGnosisSubmitEtherTransfer.prototype.getGasPrice = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes gas_price = 5;
 * This is a type-conversion wrapper around `getGasPrice()`
 * @return {string}
 */
proto.EthCommand.EthSignGnosisSubmitEtherTransfer.prototype.getGasPrice_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGasPrice()));
};


/**
 * optional bytes gas_price = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGasPrice()`
 * @return {!Uint8Array}
 */
proto.EthCommand.EthSignGnosisSubmitEtherTransfer.prototype.getGasPrice_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGasPrice()));
};


/** @param {!(string|Uint8Array)} value */
proto.EthCommand.EthSignGnosisSubmitEtherTransfer.prototype.setGasPrice = function(value) {
  jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes gas_limit = 6;
 * @return {!(string|Uint8Array)}
 */
proto.EthCommand.EthSignGnosisSubmitEtherTransfer.prototype.getGasLimit = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes gas_limit = 6;
 * This is a type-conversion wrapper around `getGasLimit()`
 * @return {string}
 */
proto.EthCommand.EthSignGnosisSubmitEtherTransfer.prototype.getGasLimit_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGasLimit()));
};


/**
 * optional bytes gas_limit = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGasLimit()`
 * @return {!Uint8Array}
 */
proto.EthCommand.EthSignGnosisSubmitEtherTransfer.prototype.getGasLimit_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGasLimit()));
};


/** @param {!(string|Uint8Array)} value */
proto.EthCommand.EthSignGnosisSubmitEtherTransfer.prototype.setGasLimit = function(value) {
  jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes gmsw_address = 7;
 * @return {!(string|Uint8Array)}
 */
proto.EthCommand.EthSignGnosisSubmitEtherTransfer.prototype.getGmswAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes gmsw_address = 7;
 * This is a type-conversion wrapper around `getGmswAddress()`
 * @return {string}
 */
proto.EthCommand.EthSignGnosisSubmitEtherTransfer.prototype.getGmswAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGmswAddress()));
};


/**
 * optional bytes gmsw_address = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGmswAddress()`
 * @return {!Uint8Array}
 */
proto.EthCommand.EthSignGnosisSubmitEtherTransfer.prototype.getGmswAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGmswAddress()));
};


/** @param {!(string|Uint8Array)} value */
proto.EthCommand.EthSignGnosisSubmitEtherTransfer.prototype.setGmswAddress = function(value) {
  jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional bytes ether_recipient_address = 8;
 * @return {!(string|Uint8Array)}
 */
proto.EthCommand.EthSignGnosisSubmitEtherTransfer.prototype.getEtherRecipientAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes ether_recipient_address = 8;
 * This is a type-conversion wrapper around `getEtherRecipientAddress()`
 * @return {string}
 */
proto.EthCommand.EthSignGnosisSubmitEtherTransfer.prototype.getEtherRecipientAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEtherRecipientAddress()));
};


/**
 * optional bytes ether_recipient_address = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEtherRecipientAddress()`
 * @return {!Uint8Array}
 */
proto.EthCommand.EthSignGnosisSubmitEtherTransfer.prototype.getEtherRecipientAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEtherRecipientAddress()));
};


/** @param {!(string|Uint8Array)} value */
proto.EthCommand.EthSignGnosisSubmitEtherTransfer.prototype.setEtherRecipientAddress = function(value) {
  jspb.Message.setProto3BytesField(this, 8, value);
};


/**
 * optional bytes ether_transfer_amount = 9;
 * @return {!(string|Uint8Array)}
 */
proto.EthCommand.EthSignGnosisSubmitEtherTransfer.prototype.getEtherTransferAmount = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes ether_transfer_amount = 9;
 * This is a type-conversion wrapper around `getEtherTransferAmount()`
 * @return {string}
 */
proto.EthCommand.EthSignGnosisSubmitEtherTransfer.prototype.getEtherTransferAmount_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEtherTransferAmount()));
};


/**
 * optional bytes ether_transfer_amount = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEtherTransferAmount()`
 * @return {!Uint8Array}
 */
proto.EthCommand.EthSignGnosisSubmitEtherTransfer.prototype.getEtherTransferAmount_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEtherTransferAmount()));
};


/** @param {!(string|Uint8Array)} value */
proto.EthCommand.EthSignGnosisSubmitEtherTransfer.prototype.setEtherTransferAmount = function(value) {
  jspb.Message.setProto3BytesField(this, 9, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EthCommand.EthSignGnosisSubmitERC20Transfer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.EthCommand.EthSignGnosisSubmitERC20Transfer.repeatedFields_, null);
};
goog.inherits(proto.EthCommand.EthSignGnosisSubmitERC20Transfer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.EthCommand.EthSignGnosisSubmitERC20Transfer.displayName = 'proto.EthCommand.EthSignGnosisSubmitERC20Transfer';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.EthCommand.EthSignGnosisSubmitERC20Transfer.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EthCommand.EthSignGnosisSubmitERC20Transfer.prototype.toObject = function(opt_includeInstance) {
  return proto.EthCommand.EthSignGnosisSubmitERC20Transfer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EthCommand.EthSignGnosisSubmitERC20Transfer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EthCommand.EthSignGnosisSubmitERC20Transfer.toObject = function(includeInstance, msg) {
  var f, obj = {
    signChainId: jspb.Message.getFieldWithDefault(msg, 1, false),
    chainId: msg.getChainId_asB64(),
    pathList: jspb.Message.getRepeatedField(msg, 3),
    nonce: msg.getNonce_asB64(),
    gasPrice: msg.getGasPrice_asB64(),
    gasLimit: msg.getGasLimit_asB64(),
    gmswAddress: msg.getGmswAddress_asB64(),
    erc20RecipientAddress: msg.getErc20RecipientAddress_asB64(),
    erc20TransferAmount: msg.getErc20TransferAmount_asB64(),
    erc20ContractAddress: msg.getErc20ContractAddress_asB64(),
    erc20TokenSymbol: msg.getErc20TokenSymbol_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EthCommand.EthSignGnosisSubmitERC20Transfer}
 */
proto.EthCommand.EthSignGnosisSubmitERC20Transfer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EthCommand.EthSignGnosisSubmitERC20Transfer;
  return proto.EthCommand.EthSignGnosisSubmitERC20Transfer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EthCommand.EthSignGnosisSubmitERC20Transfer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EthCommand.EthSignGnosisSubmitERC20Transfer}
 */
proto.EthCommand.EthSignGnosisSubmitERC20Transfer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSignChainId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChainId(value);
      break;
    case 3:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setPathList(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNonce(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGasPrice(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGasLimit(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGmswAddress(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setErc20RecipientAddress(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setErc20TransferAmount(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setErc20ContractAddress(value);
      break;
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setErc20TokenSymbol(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EthCommand.EthSignGnosisSubmitERC20Transfer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EthCommand.EthSignGnosisSubmitERC20Transfer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EthCommand.EthSignGnosisSubmitERC20Transfer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EthCommand.EthSignGnosisSubmitERC20Transfer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignChainId();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getChainId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getPathList();
  if (f.length > 0) {
    writer.writePackedUint32(
      3,
      f
    );
  }
  f = message.getNonce_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getGasPrice_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getGasLimit_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getGmswAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getErc20RecipientAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = message.getErc20TransferAmount_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = message.getErc20ContractAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = message.getErc20TokenSymbol_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      11,
      f
    );
  }
};


/**
 * optional bool sign_chain_id = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.EthCommand.EthSignGnosisSubmitERC20Transfer.prototype.getSignChainId = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.EthCommand.EthSignGnosisSubmitERC20Transfer.prototype.setSignChainId = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bytes chain_id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.EthCommand.EthSignGnosisSubmitERC20Transfer.prototype.getChainId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes chain_id = 2;
 * This is a type-conversion wrapper around `getChainId()`
 * @return {string}
 */
proto.EthCommand.EthSignGnosisSubmitERC20Transfer.prototype.getChainId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChainId()));
};


/**
 * optional bytes chain_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChainId()`
 * @return {!Uint8Array}
 */
proto.EthCommand.EthSignGnosisSubmitERC20Transfer.prototype.getChainId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChainId()));
};


/** @param {!(string|Uint8Array)} value */
proto.EthCommand.EthSignGnosisSubmitERC20Transfer.prototype.setChainId = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * repeated uint32 path = 3;
 * @return {!Array<number>}
 */
proto.EthCommand.EthSignGnosisSubmitERC20Transfer.prototype.getPathList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<number>} value */
proto.EthCommand.EthSignGnosisSubmitERC20Transfer.prototype.setPathList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.EthCommand.EthSignGnosisSubmitERC20Transfer.prototype.addPath = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.EthCommand.EthSignGnosisSubmitERC20Transfer.prototype.clearPathList = function() {
  this.setPathList([]);
};


/**
 * optional bytes nonce = 4;
 * @return {!(string|Uint8Array)}
 */
proto.EthCommand.EthSignGnosisSubmitERC20Transfer.prototype.getNonce = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes nonce = 4;
 * This is a type-conversion wrapper around `getNonce()`
 * @return {string}
 */
proto.EthCommand.EthSignGnosisSubmitERC20Transfer.prototype.getNonce_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNonce()));
};


/**
 * optional bytes nonce = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNonce()`
 * @return {!Uint8Array}
 */
proto.EthCommand.EthSignGnosisSubmitERC20Transfer.prototype.getNonce_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNonce()));
};


/** @param {!(string|Uint8Array)} value */
proto.EthCommand.EthSignGnosisSubmitERC20Transfer.prototype.setNonce = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes gas_price = 5;
 * @return {!(string|Uint8Array)}
 */
proto.EthCommand.EthSignGnosisSubmitERC20Transfer.prototype.getGasPrice = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes gas_price = 5;
 * This is a type-conversion wrapper around `getGasPrice()`
 * @return {string}
 */
proto.EthCommand.EthSignGnosisSubmitERC20Transfer.prototype.getGasPrice_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGasPrice()));
};


/**
 * optional bytes gas_price = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGasPrice()`
 * @return {!Uint8Array}
 */
proto.EthCommand.EthSignGnosisSubmitERC20Transfer.prototype.getGasPrice_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGasPrice()));
};


/** @param {!(string|Uint8Array)} value */
proto.EthCommand.EthSignGnosisSubmitERC20Transfer.prototype.setGasPrice = function(value) {
  jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes gas_limit = 6;
 * @return {!(string|Uint8Array)}
 */
proto.EthCommand.EthSignGnosisSubmitERC20Transfer.prototype.getGasLimit = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes gas_limit = 6;
 * This is a type-conversion wrapper around `getGasLimit()`
 * @return {string}
 */
proto.EthCommand.EthSignGnosisSubmitERC20Transfer.prototype.getGasLimit_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGasLimit()));
};


/**
 * optional bytes gas_limit = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGasLimit()`
 * @return {!Uint8Array}
 */
proto.EthCommand.EthSignGnosisSubmitERC20Transfer.prototype.getGasLimit_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGasLimit()));
};


/** @param {!(string|Uint8Array)} value */
proto.EthCommand.EthSignGnosisSubmitERC20Transfer.prototype.setGasLimit = function(value) {
  jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes gmsw_address = 7;
 * @return {!(string|Uint8Array)}
 */
proto.EthCommand.EthSignGnosisSubmitERC20Transfer.prototype.getGmswAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes gmsw_address = 7;
 * This is a type-conversion wrapper around `getGmswAddress()`
 * @return {string}
 */
proto.EthCommand.EthSignGnosisSubmitERC20Transfer.prototype.getGmswAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGmswAddress()));
};


/**
 * optional bytes gmsw_address = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGmswAddress()`
 * @return {!Uint8Array}
 */
proto.EthCommand.EthSignGnosisSubmitERC20Transfer.prototype.getGmswAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGmswAddress()));
};


/** @param {!(string|Uint8Array)} value */
proto.EthCommand.EthSignGnosisSubmitERC20Transfer.prototype.setGmswAddress = function(value) {
  jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional bytes erc20_recipient_address = 8;
 * @return {!(string|Uint8Array)}
 */
proto.EthCommand.EthSignGnosisSubmitERC20Transfer.prototype.getErc20RecipientAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes erc20_recipient_address = 8;
 * This is a type-conversion wrapper around `getErc20RecipientAddress()`
 * @return {string}
 */
proto.EthCommand.EthSignGnosisSubmitERC20Transfer.prototype.getErc20RecipientAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getErc20RecipientAddress()));
};


/**
 * optional bytes erc20_recipient_address = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getErc20RecipientAddress()`
 * @return {!Uint8Array}
 */
proto.EthCommand.EthSignGnosisSubmitERC20Transfer.prototype.getErc20RecipientAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getErc20RecipientAddress()));
};


/** @param {!(string|Uint8Array)} value */
proto.EthCommand.EthSignGnosisSubmitERC20Transfer.prototype.setErc20RecipientAddress = function(value) {
  jspb.Message.setProto3BytesField(this, 8, value);
};


/**
 * optional bytes erc20_transfer_amount = 9;
 * @return {!(string|Uint8Array)}
 */
proto.EthCommand.EthSignGnosisSubmitERC20Transfer.prototype.getErc20TransferAmount = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes erc20_transfer_amount = 9;
 * This is a type-conversion wrapper around `getErc20TransferAmount()`
 * @return {string}
 */
proto.EthCommand.EthSignGnosisSubmitERC20Transfer.prototype.getErc20TransferAmount_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getErc20TransferAmount()));
};


/**
 * optional bytes erc20_transfer_amount = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getErc20TransferAmount()`
 * @return {!Uint8Array}
 */
proto.EthCommand.EthSignGnosisSubmitERC20Transfer.prototype.getErc20TransferAmount_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getErc20TransferAmount()));
};


/** @param {!(string|Uint8Array)} value */
proto.EthCommand.EthSignGnosisSubmitERC20Transfer.prototype.setErc20TransferAmount = function(value) {
  jspb.Message.setProto3BytesField(this, 9, value);
};


/**
 * optional bytes erc20_contract_address = 10;
 * @return {!(string|Uint8Array)}
 */
proto.EthCommand.EthSignGnosisSubmitERC20Transfer.prototype.getErc20ContractAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes erc20_contract_address = 10;
 * This is a type-conversion wrapper around `getErc20ContractAddress()`
 * @return {string}
 */
proto.EthCommand.EthSignGnosisSubmitERC20Transfer.prototype.getErc20ContractAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getErc20ContractAddress()));
};


/**
 * optional bytes erc20_contract_address = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getErc20ContractAddress()`
 * @return {!Uint8Array}
 */
proto.EthCommand.EthSignGnosisSubmitERC20Transfer.prototype.getErc20ContractAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getErc20ContractAddress()));
};


/** @param {!(string|Uint8Array)} value */
proto.EthCommand.EthSignGnosisSubmitERC20Transfer.prototype.setErc20ContractAddress = function(value) {
  jspb.Message.setProto3BytesField(this, 10, value);
};


/**
 * optional bytes erc20_token_symbol = 11;
 * @return {!(string|Uint8Array)}
 */
proto.EthCommand.EthSignGnosisSubmitERC20Transfer.prototype.getErc20TokenSymbol = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * optional bytes erc20_token_symbol = 11;
 * This is a type-conversion wrapper around `getErc20TokenSymbol()`
 * @return {string}
 */
proto.EthCommand.EthSignGnosisSubmitERC20Transfer.prototype.getErc20TokenSymbol_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getErc20TokenSymbol()));
};


/**
 * optional bytes erc20_token_symbol = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getErc20TokenSymbol()`
 * @return {!Uint8Array}
 */
proto.EthCommand.EthSignGnosisSubmitERC20Transfer.prototype.getErc20TokenSymbol_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getErc20TokenSymbol()));
};


/** @param {!(string|Uint8Array)} value */
proto.EthCommand.EthSignGnosisSubmitERC20Transfer.prototype.setErc20TokenSymbol = function(value) {
  jspb.Message.setProto3BytesField(this, 11, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EthCommand.EthSignGnosisConfirm = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.EthCommand.EthSignGnosisConfirm.repeatedFields_, null);
};
goog.inherits(proto.EthCommand.EthSignGnosisConfirm, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.EthCommand.EthSignGnosisConfirm.displayName = 'proto.EthCommand.EthSignGnosisConfirm';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.EthCommand.EthSignGnosisConfirm.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EthCommand.EthSignGnosisConfirm.prototype.toObject = function(opt_includeInstance) {
  return proto.EthCommand.EthSignGnosisConfirm.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EthCommand.EthSignGnosisConfirm} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EthCommand.EthSignGnosisConfirm.toObject = function(includeInstance, msg) {
  var f, obj = {
    signChainId: jspb.Message.getFieldWithDefault(msg, 1, false),
    chainId: msg.getChainId_asB64(),
    pathList: jspb.Message.getRepeatedField(msg, 3),
    nonce: msg.getNonce_asB64(),
    gasPrice: msg.getGasPrice_asB64(),
    gasLimit: msg.getGasLimit_asB64(),
    gmswAddress: msg.getGmswAddress_asB64(),
    gmswTxId: msg.getGmswTxId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EthCommand.EthSignGnosisConfirm}
 */
proto.EthCommand.EthSignGnosisConfirm.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EthCommand.EthSignGnosisConfirm;
  return proto.EthCommand.EthSignGnosisConfirm.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EthCommand.EthSignGnosisConfirm} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EthCommand.EthSignGnosisConfirm}
 */
proto.EthCommand.EthSignGnosisConfirm.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSignChainId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChainId(value);
      break;
    case 3:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setPathList(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNonce(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGasPrice(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGasLimit(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGmswAddress(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGmswTxId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EthCommand.EthSignGnosisConfirm.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EthCommand.EthSignGnosisConfirm.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EthCommand.EthSignGnosisConfirm} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EthCommand.EthSignGnosisConfirm.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignChainId();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getChainId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getPathList();
  if (f.length > 0) {
    writer.writePackedUint32(
      3,
      f
    );
  }
  f = message.getNonce_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getGasPrice_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getGasLimit_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getGmswAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getGmswTxId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
};


/**
 * optional bool sign_chain_id = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.EthCommand.EthSignGnosisConfirm.prototype.getSignChainId = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.EthCommand.EthSignGnosisConfirm.prototype.setSignChainId = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bytes chain_id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.EthCommand.EthSignGnosisConfirm.prototype.getChainId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes chain_id = 2;
 * This is a type-conversion wrapper around `getChainId()`
 * @return {string}
 */
proto.EthCommand.EthSignGnosisConfirm.prototype.getChainId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChainId()));
};


/**
 * optional bytes chain_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChainId()`
 * @return {!Uint8Array}
 */
proto.EthCommand.EthSignGnosisConfirm.prototype.getChainId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChainId()));
};


/** @param {!(string|Uint8Array)} value */
proto.EthCommand.EthSignGnosisConfirm.prototype.setChainId = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * repeated uint32 path = 3;
 * @return {!Array<number>}
 */
proto.EthCommand.EthSignGnosisConfirm.prototype.getPathList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<number>} value */
proto.EthCommand.EthSignGnosisConfirm.prototype.setPathList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.EthCommand.EthSignGnosisConfirm.prototype.addPath = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.EthCommand.EthSignGnosisConfirm.prototype.clearPathList = function() {
  this.setPathList([]);
};


/**
 * optional bytes nonce = 4;
 * @return {!(string|Uint8Array)}
 */
proto.EthCommand.EthSignGnosisConfirm.prototype.getNonce = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes nonce = 4;
 * This is a type-conversion wrapper around `getNonce()`
 * @return {string}
 */
proto.EthCommand.EthSignGnosisConfirm.prototype.getNonce_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNonce()));
};


/**
 * optional bytes nonce = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNonce()`
 * @return {!Uint8Array}
 */
proto.EthCommand.EthSignGnosisConfirm.prototype.getNonce_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNonce()));
};


/** @param {!(string|Uint8Array)} value */
proto.EthCommand.EthSignGnosisConfirm.prototype.setNonce = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes gas_price = 5;
 * @return {!(string|Uint8Array)}
 */
proto.EthCommand.EthSignGnosisConfirm.prototype.getGasPrice = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes gas_price = 5;
 * This is a type-conversion wrapper around `getGasPrice()`
 * @return {string}
 */
proto.EthCommand.EthSignGnosisConfirm.prototype.getGasPrice_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGasPrice()));
};


/**
 * optional bytes gas_price = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGasPrice()`
 * @return {!Uint8Array}
 */
proto.EthCommand.EthSignGnosisConfirm.prototype.getGasPrice_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGasPrice()));
};


/** @param {!(string|Uint8Array)} value */
proto.EthCommand.EthSignGnosisConfirm.prototype.setGasPrice = function(value) {
  jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes gas_limit = 6;
 * @return {!(string|Uint8Array)}
 */
proto.EthCommand.EthSignGnosisConfirm.prototype.getGasLimit = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes gas_limit = 6;
 * This is a type-conversion wrapper around `getGasLimit()`
 * @return {string}
 */
proto.EthCommand.EthSignGnosisConfirm.prototype.getGasLimit_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGasLimit()));
};


/**
 * optional bytes gas_limit = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGasLimit()`
 * @return {!Uint8Array}
 */
proto.EthCommand.EthSignGnosisConfirm.prototype.getGasLimit_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGasLimit()));
};


/** @param {!(string|Uint8Array)} value */
proto.EthCommand.EthSignGnosisConfirm.prototype.setGasLimit = function(value) {
  jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes gmsw_address = 7;
 * @return {!(string|Uint8Array)}
 */
proto.EthCommand.EthSignGnosisConfirm.prototype.getGmswAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes gmsw_address = 7;
 * This is a type-conversion wrapper around `getGmswAddress()`
 * @return {string}
 */
proto.EthCommand.EthSignGnosisConfirm.prototype.getGmswAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGmswAddress()));
};


/**
 * optional bytes gmsw_address = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGmswAddress()`
 * @return {!Uint8Array}
 */
proto.EthCommand.EthSignGnosisConfirm.prototype.getGmswAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGmswAddress()));
};


/** @param {!(string|Uint8Array)} value */
proto.EthCommand.EthSignGnosisConfirm.prototype.setGmswAddress = function(value) {
  jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional bytes gmsw_tx_id = 8;
 * @return {!(string|Uint8Array)}
 */
proto.EthCommand.EthSignGnosisConfirm.prototype.getGmswTxId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes gmsw_tx_id = 8;
 * This is a type-conversion wrapper around `getGmswTxId()`
 * @return {string}
 */
proto.EthCommand.EthSignGnosisConfirm.prototype.getGmswTxId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGmswTxId()));
};


/**
 * optional bytes gmsw_tx_id = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGmswTxId()`
 * @return {!Uint8Array}
 */
proto.EthCommand.EthSignGnosisConfirm.prototype.getGmswTxId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGmswTxId()));
};


/** @param {!(string|Uint8Array)} value */
proto.EthCommand.EthSignGnosisConfirm.prototype.setGmswTxId = function(value) {
  jspb.Message.setProto3BytesField(this, 8, value);
};


/**
 * optional EthGetXPub get_xpub = 1;
 * @return {?proto.EthCommand.EthGetXPub}
 */
proto.EthCommand.prototype.getGetXpub = function() {
  return /** @type{?proto.EthCommand.EthGetXPub} */ (
    jspb.Message.getWrapperField(this, proto.EthCommand.EthGetXPub, 1));
};


/** @param {?proto.EthCommand.EthGetXPub|undefined} value */
proto.EthCommand.prototype.setGetXpub = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.EthCommand.oneofGroups_[0], value);
};


proto.EthCommand.prototype.clearGetXpub = function() {
  this.setGetXpub(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EthCommand.prototype.hasGetXpub = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional EthShowAddr show_addr = 2;
 * @return {?proto.EthCommand.EthShowAddr}
 */
proto.EthCommand.prototype.getShowAddr = function() {
  return /** @type{?proto.EthCommand.EthShowAddr} */ (
    jspb.Message.getWrapperField(this, proto.EthCommand.EthShowAddr, 2));
};


/** @param {?proto.EthCommand.EthShowAddr|undefined} value */
proto.EthCommand.prototype.setShowAddr = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.EthCommand.oneofGroups_[0], value);
};


proto.EthCommand.prototype.clearShowAddr = function() {
  this.setShowAddr(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EthCommand.prototype.hasShowAddr = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional EthSignBasicTx sign_basic_tx = 3;
 * @return {?proto.EthCommand.EthSignBasicTx}
 */
proto.EthCommand.prototype.getSignBasicTx = function() {
  return /** @type{?proto.EthCommand.EthSignBasicTx} */ (
    jspb.Message.getWrapperField(this, proto.EthCommand.EthSignBasicTx, 3));
};


/** @param {?proto.EthCommand.EthSignBasicTx|undefined} value */
proto.EthCommand.prototype.setSignBasicTx = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.EthCommand.oneofGroups_[0], value);
};


proto.EthCommand.prototype.clearSignBasicTx = function() {
  this.setSignBasicTx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EthCommand.prototype.hasSignBasicTx = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional EthSignERC20Tx sign_erc20_tx = 4;
 * @return {?proto.EthCommand.EthSignERC20Tx}
 */
proto.EthCommand.prototype.getSignErc20Tx = function() {
  return /** @type{?proto.EthCommand.EthSignERC20Tx} */ (
    jspb.Message.getWrapperField(this, proto.EthCommand.EthSignERC20Tx, 4));
};


/** @param {?proto.EthCommand.EthSignERC20Tx|undefined} value */
proto.EthCommand.prototype.setSignErc20Tx = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.EthCommand.oneofGroups_[0], value);
};


proto.EthCommand.prototype.clearSignErc20Tx = function() {
  this.setSignErc20Tx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EthCommand.prototype.hasSignErc20Tx = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional EthSign32ByteHash sign_32byte_hash = 5;
 * @return {?proto.EthCommand.EthSign32ByteHash}
 */
proto.EthCommand.prototype.getSign32byteHash = function() {
  return /** @type{?proto.EthCommand.EthSign32ByteHash} */ (
    jspb.Message.getWrapperField(this, proto.EthCommand.EthSign32ByteHash, 5));
};


/** @param {?proto.EthCommand.EthSign32ByteHash|undefined} value */
proto.EthCommand.prototype.setSign32byteHash = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.EthCommand.oneofGroups_[0], value);
};


proto.EthCommand.prototype.clearSign32byteHash = function() {
  this.setSign32byteHash(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EthCommand.prototype.hasSign32byteHash = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional EthSignGnosisSubmitEtherTransfer sign_gnosis_submit_ether_transfer = 8;
 * @return {?proto.EthCommand.EthSignGnosisSubmitEtherTransfer}
 */
proto.EthCommand.prototype.getSignGnosisSubmitEtherTransfer = function() {
  return /** @type{?proto.EthCommand.EthSignGnosisSubmitEtherTransfer} */ (
    jspb.Message.getWrapperField(this, proto.EthCommand.EthSignGnosisSubmitEtherTransfer, 8));
};


/** @param {?proto.EthCommand.EthSignGnosisSubmitEtherTransfer|undefined} value */
proto.EthCommand.prototype.setSignGnosisSubmitEtherTransfer = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.EthCommand.oneofGroups_[0], value);
};


proto.EthCommand.prototype.clearSignGnosisSubmitEtherTransfer = function() {
  this.setSignGnosisSubmitEtherTransfer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EthCommand.prototype.hasSignGnosisSubmitEtherTransfer = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional EthSignGnosisSubmitERC20Transfer sign_gnosis_submit_erc20_transfer = 6;
 * @return {?proto.EthCommand.EthSignGnosisSubmitERC20Transfer}
 */
proto.EthCommand.prototype.getSignGnosisSubmitErc20Transfer = function() {
  return /** @type{?proto.EthCommand.EthSignGnosisSubmitERC20Transfer} */ (
    jspb.Message.getWrapperField(this, proto.EthCommand.EthSignGnosisSubmitERC20Transfer, 6));
};


/** @param {?proto.EthCommand.EthSignGnosisSubmitERC20Transfer|undefined} value */
proto.EthCommand.prototype.setSignGnosisSubmitErc20Transfer = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.EthCommand.oneofGroups_[0], value);
};


proto.EthCommand.prototype.clearSignGnosisSubmitErc20Transfer = function() {
  this.setSignGnosisSubmitErc20Transfer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EthCommand.prototype.hasSignGnosisSubmitErc20Transfer = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional EthSignGnosisConfirm sign_gnosis_confirm = 7;
 * @return {?proto.EthCommand.EthSignGnosisConfirm}
 */
proto.EthCommand.prototype.getSignGnosisConfirm = function() {
  return /** @type{?proto.EthCommand.EthSignGnosisConfirm} */ (
    jspb.Message.getWrapperField(this, proto.EthCommand.EthSignGnosisConfirm, 7));
};


/** @param {?proto.EthCommand.EthSignGnosisConfirm|undefined} value */
proto.EthCommand.prototype.setSignGnosisConfirm = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.EthCommand.oneofGroups_[0], value);
};


proto.EthCommand.prototype.clearSignGnosisConfirm = function() {
  this.setSignGnosisConfirm(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EthCommand.prototype.hasSignGnosisConfirm = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EthResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.EthResponse.oneofGroups_);
};
goog.inherits(proto.EthResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.EthResponse.displayName = 'proto.EthResponse';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.EthResponse.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.EthResponse.MsgCase = {
  MSG_NOT_SET: 0,
  ERROR: 1,
  XPUB: 2,
  SIG: 3
};

/**
 * @return {proto.EthResponse.MsgCase}
 */
proto.EthResponse.prototype.getMsgCase = function() {
  return /** @type {proto.EthResponse.MsgCase} */(jspb.Message.computeOneofCase(this, proto.EthResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EthResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.EthResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EthResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EthResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: jspb.Message.getFieldWithDefault(msg, 1, 0),
    xpub: (f = msg.getXpub()) && proto.EthResponse.EthXPub.toObject(includeInstance, f),
    sig: (f = msg.getSig()) && proto.EthResponse.EthSig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EthResponse}
 */
proto.EthResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EthResponse;
  return proto.EthResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EthResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EthResponse}
 */
proto.EthResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Error} */ (reader.readEnum());
      msg.setError(value);
      break;
    case 2:
      var value = new proto.EthResponse.EthXPub;
      reader.readMessage(value,proto.EthResponse.EthXPub.deserializeBinaryFromReader);
      msg.setXpub(value);
      break;
    case 3:
      var value = new proto.EthResponse.EthSig;
      reader.readMessage(value,proto.EthResponse.EthSig.deserializeBinaryFromReader);
      msg.setSig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EthResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EthResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EthResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EthResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.Error} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getXpub();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.EthResponse.EthXPub.serializeBinaryToWriter
    );
  }
  f = message.getSig();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.EthResponse.EthSig.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EthResponse.EthXPub = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EthResponse.EthXPub, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.EthResponse.EthXPub.displayName = 'proto.EthResponse.EthXPub';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EthResponse.EthXPub.prototype.toObject = function(opt_includeInstance) {
  return proto.EthResponse.EthXPub.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EthResponse.EthXPub} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EthResponse.EthXPub.toObject = function(includeInstance, msg) {
  var f, obj = {
    xpub: msg.getXpub_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EthResponse.EthXPub}
 */
proto.EthResponse.EthXPub.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EthResponse.EthXPub;
  return proto.EthResponse.EthXPub.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EthResponse.EthXPub} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EthResponse.EthXPub}
 */
proto.EthResponse.EthXPub.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setXpub(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EthResponse.EthXPub.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EthResponse.EthXPub.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EthResponse.EthXPub} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EthResponse.EthXPub.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getXpub_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes xpub = 1;
 * @return {!(string|Uint8Array)}
 */
proto.EthResponse.EthXPub.prototype.getXpub = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes xpub = 1;
 * This is a type-conversion wrapper around `getXpub()`
 * @return {string}
 */
proto.EthResponse.EthXPub.prototype.getXpub_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getXpub()));
};


/**
 * optional bytes xpub = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getXpub()`
 * @return {!Uint8Array}
 */
proto.EthResponse.EthXPub.prototype.getXpub_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getXpub()));
};


/** @param {!(string|Uint8Array)} value */
proto.EthResponse.EthXPub.prototype.setXpub = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EthResponse.EthSig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EthResponse.EthSig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.EthResponse.EthSig.displayName = 'proto.EthResponse.EthSig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EthResponse.EthSig.prototype.toObject = function(opt_includeInstance) {
  return proto.EthResponse.EthSig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EthResponse.EthSig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EthResponse.EthSig.toObject = function(includeInstance, msg) {
  var f, obj = {
    sigR: msg.getSigR_asB64(),
    sigS: msg.getSigS_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EthResponse.EthSig}
 */
proto.EthResponse.EthSig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EthResponse.EthSig;
  return proto.EthResponse.EthSig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EthResponse.EthSig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EthResponse.EthSig}
 */
proto.EthResponse.EthSig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSigR(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSigS(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EthResponse.EthSig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EthResponse.EthSig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EthResponse.EthSig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EthResponse.EthSig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSigR_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSigS_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes sig_r = 1;
 * @return {!(string|Uint8Array)}
 */
proto.EthResponse.EthSig.prototype.getSigR = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes sig_r = 1;
 * This is a type-conversion wrapper around `getSigR()`
 * @return {string}
 */
proto.EthResponse.EthSig.prototype.getSigR_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSigR()));
};


/**
 * optional bytes sig_r = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSigR()`
 * @return {!Uint8Array}
 */
proto.EthResponse.EthSig.prototype.getSigR_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSigR()));
};


/** @param {!(string|Uint8Array)} value */
proto.EthResponse.EthSig.prototype.setSigR = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes sig_s = 2;
 * @return {!(string|Uint8Array)}
 */
proto.EthResponse.EthSig.prototype.getSigS = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes sig_s = 2;
 * This is a type-conversion wrapper around `getSigS()`
 * @return {string}
 */
proto.EthResponse.EthSig.prototype.getSigS_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSigS()));
};


/**
 * optional bytes sig_s = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSigS()`
 * @return {!Uint8Array}
 */
proto.EthResponse.EthSig.prototype.getSigS_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSigS()));
};


/** @param {!(string|Uint8Array)} value */
proto.EthResponse.EthSig.prototype.setSigS = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {!proto.Error}
 */
proto.EthResponse.prototype.getError = function() {
  return /** @type {!proto.Error} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Error} value */
proto.EthResponse.prototype.setError = function(value) {
  jspb.Message.setOneofField(this, 1, proto.EthResponse.oneofGroups_[0], value);
};


proto.EthResponse.prototype.clearError = function() {
  jspb.Message.setOneofField(this, 1, proto.EthResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EthResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional EthXPub xpub = 2;
 * @return {?proto.EthResponse.EthXPub}
 */
proto.EthResponse.prototype.getXpub = function() {
  return /** @type{?proto.EthResponse.EthXPub} */ (
    jspb.Message.getWrapperField(this, proto.EthResponse.EthXPub, 2));
};


/** @param {?proto.EthResponse.EthXPub|undefined} value */
proto.EthResponse.prototype.setXpub = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.EthResponse.oneofGroups_[0], value);
};


proto.EthResponse.prototype.clearXpub = function() {
  this.setXpub(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EthResponse.prototype.hasXpub = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional EthSig sig = 3;
 * @return {?proto.EthResponse.EthSig}
 */
proto.EthResponse.prototype.getSig = function() {
  return /** @type{?proto.EthResponse.EthSig} */ (
    jspb.Message.getWrapperField(this, proto.EthResponse.EthSig, 3));
};


/** @param {?proto.EthResponse.EthSig|undefined} value */
proto.EthResponse.prototype.setSig = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.EthResponse.oneofGroups_[0], value);
};


proto.EthResponse.prototype.clearSig = function() {
  this.setSig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EthResponse.prototype.hasSig = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto);
